<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Elementary Algebra</title>
      <link href="/posts/Elementary-Algebra.html"/>
      <url>/posts/Elementary-Algebra.html</url>
      
        <content type="html"><![CDATA[<p align="center">本文内容的真正记录位置在笔者生成上传的自定义页面中，此页面仅用于展示该学科的整体框架，同时提供具体内容入口链接；本页面以及自定义页内容将长期更新</p><p>本文的链接按照时间顺序排序。</p><p><a href="../custom_page/Elementary-Algebra/Discussion-on-difference-of-two-powers.html">Discussion on difference of two powers</a></p>]]></content>
      
      
      <categories>
          
          <category> 初等代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Image Processing and Computer Graphics</title>
      <link href="/posts/Image-Processing-and-Computer-Graphics.html"/>
      <url>/posts/Image-Processing-and-Computer-Graphics.html</url>
      
        <content type="html"><![CDATA[<p align="center">本文内容的真正记录位置在笔者生成上传的自定义页面中，此页面仅用于展示该学科的整体框架，同时提供具体内容入口链接；本页面以及自定义页内容将长期更新</p><p>本文的链接按照时间顺序排序。</p><h4 id="前置数学基础"><a href="#前置数学基础" class="headerlink" title="前置数学基础"></a>前置数学基础</h4><ul><li><a href="../custom_page/Image-and-Graphics/Euler's-Rotation-Theorem/Euler's-Rotation-Theorem.html">欧拉旋转定理</a></li></ul><h4 id="3D-几何学"><a href="#3D-几何学" class="headerlink" title="3D 几何学"></a>3D 几何学</h4><ul><li><p><a href="../custom_page/Image-and-Graphics/Introduction-of-3D-Geometry/Introduction-of-3D-Geometry.html">3D 几何学概述</a></p></li><li><p><a href="../custom_page/Image-and-Graphics/How-does-Computer-Process-Pictures/How-does-Computer-Process-Pictures.html">计算机中的图形 / 图像表示</a></p></li></ul><p>// TODO</p>]]></content>
      
      
      <categories>
          
          <category> 图形与图像 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Advanced Algebra: Notes and Problem Set</title>
      <link href="/posts/Advanced-Algebra.html"/>
      <url>/posts/Advanced-Algebra.html</url>
      
        <content type="html"><![CDATA[<p align="center">本文内容的真正记录位置在笔者生成上传的自定义页面中，此页面仅用于展示该学科的整体框架，同时提供具体内容入口链接；本页面以及自定义页内容将长期更新</p><p>本文的链接按照时间顺序排序。</p>]]></content>
      
      
      <categories>
          
          <category> 高等代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 习题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Abstract Algebra: Notes and Problem Set</title>
      <link href="/posts/Abstract-Algebra.html"/>
      <url>/posts/Abstract-Algebra.html</url>
      
        <content type="html"><![CDATA[<p align="center">本文内容的真正记录位置在笔者生成上传的自定义页面中，此页面仅用于展示该学科的整体框架，同时提供具体内容入口链接；本页面以及自定义页内容将长期更新</p><p>本文的链接按照时间顺序排序。</p><ul><li><p><a href="../custom_page/Abstract-Algebra/AbstractAlgebra-Note-Ch01-Section01/AbstractAlgebra-Note-Ch01-Section01.html">抽象代数笔记 001</a></p></li><li><p><a href="../custom_page/Abstract-Algebra/AbstractAlgebra-Note-Ch01-Section02/AbstractAlgebra-Note-Ch01-Section02.html">抽象代数笔记 002</a></p></li><li><p><a href="../custom_page/Abstract-Algebra/AbstractAlgebra-Note-Ch01-Section02-P2/AbstractAlgebra-Note-Ch01-Section02-P2.html">抽象代数笔记 002.5</a></p></li><li><p><a href="../custom_page/Abstract-Algebra/AbstractAlgebra-Note-Ch01-Section03/AbstractAlgebra-Note-Ch01-Section03.html">抽象代数笔记 003</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 抽象代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 习题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Combinatorics: Notes and Problem Set</title>
      <link href="/posts/Combinatorics:-Notes-and-Problem-Set.html"/>
      <url>/posts/Combinatorics:-Notes-and-Problem-Set.html</url>
      
        <content type="html"><![CDATA[<p align="center">本文内容的真正记录位置在笔者生成上传的自定义页面中，此页面仅用于展示该学科的整体框架，同时提供具体内容入口链接；本页面以及自定义页内容将长期更新</p><p>本文的链接按照内容架构排序</p><h4 id="一些有趣的组合应用问题"><a href="#一些有趣的组合应用问题" class="headerlink" title="一些有趣的组合应用问题"></a>一些有趣的组合应用问题</h4><p>// TODO;</p><h4 id="计数组合"><a href="#计数组合" class="headerlink" title="计数组合"></a>计数组合</h4><h5 id="排列与组合"><a href="#排列与组合" class="headerlink" title="排列与组合"></a>排列与组合</h5><ol><li><p>[计数原理]</p></li><li><p>[基本计数模型和公式]</p></li><li><p>习题集</p><ul><li><a href="../custom_page/Combinatorics/An-interesting-counting-problem/An-interesting-counting-problem.html">随手做的一个问题</a></li></ul></li></ol><h5 id="抽屉原理"><a href="#抽屉原理" class="headerlink" title="抽屉原理"></a>抽屉原理</h5><ol><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle/Pigeonhole-Principle.html">抽屉原理</a></p></li><li><p>[Ramsey 原理]</p></li><li><p>习题集</p><ul><li><p><a href="../custom_page/Combinatorics/Problem-of-Longest-Monotonic-Subsequence/Problem-of-Longest-Monotonic-Subsequence.html">最长单调子序列问题</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-001/Pigeonhole-Principle-Exercise-001.html">Pigeonhole Principle Exercise 001</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-002/Pigeonhole-Principle-Exercise-002.html">Pigeonhole Principle Exercise 002</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-003/Pigeonhole-Principle-Exercise-003.html">Pigeonhole Principle Exercise 003</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-004/Pigeonhole-Principle-Exercise-004.html">Pigeonhole Principle Exercise 004</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-005/Pigeonhole-Principle-Exercise-005.html">Pigeonhole Principle Exercise 005</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-006/Pigeonhole-Principle-Exercise-006.html">Pigeonhole Principle Exercise 006</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-007/Pigeonhole-Principle-Exercise-007.html">Pigeonhole Principle Exercise 007</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-008/Pigeonhole-Principle-Exercise-008.html">Pigeonhole Principle Exercise 008</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-009/Pigeonhole-Principle-Exercise-009.html">Pigeonhole Principle Exercise 009</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-010/Pigeonhole-Principle-Exercise-010.html">Pigeonhole Principle Exercise 010</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-011/Pigeonhole-Principle-Exercise-011.html">Pigeonhole Principle Exercise 011</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-012/Pigeonhole-Principle-Exercise-012.html">Pigeonhole Principle Exercise 012</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-013/Pigeonhole-Principle-Exercise-013.html">Pigeonhole Principle Exercise 013</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-014/Pigeonhole-Principle-Exercise-014.html">Pigeonhole Principle Exercise 014</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-015/Pigeonhole-Principle-Exercise-015.html">Pigeonhole Principle Exercise 015</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-016/Pigeonhole-Principle-Exercise-016.html">Pigeonhole Principle Exercise 016</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-017/Pigeonhole-Principle-Exercise-017.html">Pigeonhole Principle Exercise 017</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-018/Pigeonhole-Principle-Exercise-018.html">Pigeonhole Principle Exercise 018</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-019/Pigeonhole-Principle-Exercise-019.html">Pigeonhole Principle Exercise 019</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-020/Pigeonhole-Principle-Exercise-020.html">Pigeonhole Principle Exercise 020</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-021/Pigeonhole-Principle-Exercise-021.html">Pigeonhole Principle Exercise 021</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-022/Pigeonhole-Principle-Exercise-022.html">Pigeonhole Principle Exercise 022</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-023/Pigeonhole-Principle-Exercise-023.html">Pigeonhole Principle Exercise 023</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-024/Pigeonhole-Principle-Exercise-024.html">Pigeonhole Principle Exercise 024</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-025/Pigeonhole-Principle-Exercise-025.html">Pigeonhole Principle Exercise 025</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-026/Pigeonhole-Principle-Exercise-026.html">Pigeonhole Principle Exercise 026</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-027/Pigeonhole-Principle-Exercise-027.html">Pigeonhole Principle Exercise 027</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-028/Pigeonhole-Principle-Exercise-028.html">Pigeonhole Principle Exercise 028</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-029/Pigeonhole-Principle-Exercise-029.html">Pigeonhole Principle Exercise 029</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-030/Pigeonhole-Principle-Exercise-030.html">Pigeonhole Principle Exercise 030</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-031/Pigeonhole-Principle-Exercise-031.html">Pigeonhole Principle Exercise 031</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-032/Pigeonhole-Principle-Exercise-032.html">Pigeonhole Principle Exercise 032</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-033/Pigeonhole-Principle-Exercise-033.html">Pigeonhole Principle Exercise 033</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-034/Pigeonhole-Principle-Exercise-034.html">Pigeonhole Principle Exercise 034</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-035/Pigeonhole-Principle-Exercise-035.html">Pigeonhole Principle Exercise 035</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-036/Pigeonhole-Principle-Exercise-036.html">Pigeonhole Principle Exercise 036</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-037/Pigeonhole-Principle-Exercise-037.html">Pigeonhole Principle Exercise 037</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-038/Pigeonhole-Principle-Exercise-038.html">Pigeonhole Principle Exercise 038</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-039/Pigeonhole-Principle-Exercise-039.html">Pigeonhole Principle Exercise 039</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-040/Pigeonhole-Principle-Exercise-040.html">Pigeonhole Principle Exercise 040</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-041/Pigeonhole-Principle-Exercise-041.html">Pigeonhole Principle Exercise 041</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-042/Pigeonhole-Principle-Exercise-042.html">Pigeonhole Principle Exercise 042</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-043/Pigeonhole-Principle-Exercise-043.html">Pigeonhole Principle Exercise 043</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-044/Pigeonhole-Principle-Exercise-044.html">Pigeonhole Principle Exercise 044</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-045/Pigeonhole-Principle-Exercise-045.html">Pigeonhole Principle Exercise 045</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-046/Pigeonhole-Principle-Exercise-046.html">Pigeonhole Principle Exercise 046</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-047/Pigeonhole-Principle-Exercise-047.html">Pigeonhole Principle Exercise 047</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-048/Pigeonhole-Principle-Exercise-048.html">Pigeonhole Principle Exercise 048</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-049/Pigeonhole-Principle-Exercise-049.html">Pigeonhole Principle Exercise 049</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-050/Pigeonhole-Principle-Exercise-050.html">Pigeonhole Principle Exercise 050</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-051/Pigeonhole-Principle-Exercise-051.html">Pigeonhole Principle Exercise 051</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-052/Pigeonhole-Principle-Exercise-052.html">Pigeonhole Principle Exercise 052</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-053/Pigeonhole-Principle-Exercise-053.html">Pigeonhole Principle Exercise 053</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-054/Pigeonhole-Principle-Exercise-054.html">Pigeonhole Principle Exercise 054</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-055/Pigeonhole-Principle-Exercise-055.html">Pigeonhole Principle Exercise 055</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-056/Pigeonhole-Principle-Exercise-056.html">Pigeonhole Principle Exercise 056</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-057/Pigeonhole-Principle-Exercise-057.html">Pigeonhole Principle Exercise 057</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-058/Pigeonhole-Principle-Exercise-058.html">Pigeonhole Principle Exercise 058</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-059/Pigeonhole-Principle-Exercise-059.html">Pigeonhole Principle Exercise 059</a></p></li><li><p><a href="../custom_page/Combinatorics/Pigeonhole-Principle-Exercise-060/Pigeonhole-Principle-Exercise-060.html">Pigeonhole Principle Exercise 060</a></p></li></ul></li></ol><h5 id="生成排列与组合算法"><a href="#生成排列与组合算法" class="headerlink" title="生成排列与组合算法"></a>生成排列与组合算法</h5><ol><li><p>[逆序数与生成排列]</p></li><li><p>[生成幂集与 r-子集]</p></li><li><p>[其他类型集合的生成算法]</p></li><li><p>习题集</p></li></ol><h5 id="偏序集"><a href="#偏序集" class="headerlink" title="偏序集"></a>偏序集</h5><ol><li><p><a href="../custom_page/Combinatorics/Basic-Concepts-of-Poset/Basic-Concepts-of-Poset.html">偏序集引论</a></p></li><li><p><a href="../custom_page/Combinatorics/Mirsky's-and-Dilworth's-theorem/Mirsky's-and-Dilworth's-theorem.html">Mirsky’s and Dilworth’s theorem</a></p></li><li><p><a href="../custom_page/Combinatorics/Sperner-Theorem/Sperner-Theorem.html">Sperner Theorem</a></p></li><li><p>习题集</p></li></ol><h4 id="二项式系数与二项式定理"><a href="#二项式系数与二项式定理" class="headerlink" title="二项式系数与二项式定理"></a>二项式系数与二项式定理</h4><ol><li><p>[二项式系数]</p></li><li><p>[二项式定理与性质]</p></li><li><p>[二项式定理的推广]</p></li><li><p>习题集</p></li></ol><h4 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h4><ol><li><p><a href="../custom_page/Combinatorics/Principle-of-Inclusion-Exclusion/Principle-of-Inclusion-Exclusion.html">容斥原理</a></p></li><li><p>[莫比乌斯反演]</p></li><li><p>习题集</p></li></ol><h4 id="递推关系和生成函数"><a href="#递推关系和生成函数" class="headerlink" title="递推关系和生成函数"></a>递推关系和生成函数</h4><p>// TODO;</p><h4 id="特殊计数序列"><a href="#特殊计数序列" class="headerlink" title="特殊计数序列"></a>特殊计数序列</h4><p>// TODO;</p><h4 id="组合设计"><a href="#组合设计" class="headerlink" title="组合设计"></a>组合设计</h4><p>// TODO;</p><h4 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h4><p>// TODO;</p>]]></content>
      
      
      <categories>
          
          <category> 组合数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 习题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning English: Word and Pharse</title>
      <link href="/posts/word-and-phrase.html"/>
      <url>/posts/word-and-phrase.html</url>
      
        <content type="html"><![CDATA[<p align="center">本文内容的真正记录位置在笔者生成上传的自定义页面中，此页面仅用于展示该学科的整体框架，同时提供具体内容入口链接；本页面以及自定义页内容将长期更新</p><p>本文的链接按照时间排序</p><ul><li><a href="../custom_page/Word-and-Phrase/How-to-say-gengbieshuo-in-English/How-to-say-gengbieshuo-in-English.html">英语中如何表达“更别说”</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词汇 </tag>
            
            <tag> 短语 </tag>
            
            <tag> 语料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning English: Grammar</title>
      <link href="/posts/Grammar.html"/>
      <url>/posts/Grammar.html</url>
      
        <content type="html"><![CDATA[<p align="center">本文内容的真正记录位置在笔者生成上传的自定义页面中，此页面仅用于展示该学科的整体框架，同时提供具体内容入口链接；本页面以及自定义页内容将长期更新</p><p>本文的链接按照内容架构排序</p><p><a href="../custom_page/Grammar/Introduction/Introduction.html">英语语法导论</a></p><p><a href="../custom_page/Grammar/Grammar_System/Grammar_System.html">语法体系概述</a></p><p><a href="../custom_page/Grammar/Morpheme/Morpheme.html">语言层级：词素</a></p><p><a href="../custom_page/Grammar/Word/Word.html">语言层级：词</a></p><p><a href="../custom_page/Grammar/Phrase/Phrase.html">语言层级：词组</a></p><p><a href="../custom_page/Grammar/Finite_and_non_Finite/Finite_and_non_Finite.html">概念梳理：动词，词组，分句的限定 / 非限定形式</a></p><p><a href="../custom_page/Grammar/Clause/Clause.html">语言层级：分句</a></p><p><a href="../custom_page/Grammar/Sentence/Sentence.html">语言层级：句子</a></p><p><a href="../custom_page/Grammar/Structure_of_Clause/Structure_of_Clause.html">分句结构与成分</a></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> 句法 </tag>
            
            <tag> 词法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning Python: Notes</title>
      <link href="/posts/Learning-Python:-Notes.html"/>
      <url>/posts/Learning-Python:-Notes.html</url>
      
        <content type="html"><![CDATA[<p align="center"><b>本博文的内容写在自定义页面上，将长期维护更新</b></p><p>笔者学习 Python 的笔记，按照时间顺序排序。</p><ul><li><a href="../custom_page/Python学习笔记/Python学习笔记.html">Python 学习笔记 001</a></li><li><a href="../custom_page/Python学习笔记-002/Python学习笔记-002.html">Python 学习笔记 002</a></li><li><a href="../custom_page/Python学习笔记-003/Python学习笔记-003.html">Python 学习笔记 003</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 Ubuntu 键盘映射</title>
      <link href="/posts/Modify-keyboard-mapping-on-Ubuntu.html"/>
      <url>/posts/Modify-keyboard-mapping-on-Ubuntu.html</url>
      
        <content type="html"><![CDATA[<h5 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h5><p>笔者的输入特点：</p><ol><li>中英混杂<br>尤其是在写博客的时候;</li><li>大量符号<br>无论是 LaTeX 公式 还是代码 ( LaTeX 源码本质上也是一种代码 ) 都含有大量的标点符号;</li><li>需要经常用到各种功能键<br>这一点可以从前两点看出;</li></ol><h5 id="2-现状"><a href="#2-现状" class="headerlink" title="2. 现状"></a>2. 现状</h5><ol><li><p>笔者自己分析过为什么 写博客 记笔记 敲代码 这些事情在自己身上难以坚持下去, 或者说总有一种 “不畅快感”, 后来发现打字的问题占了很大一部分原因; 笔者之前一直在使用 二指禅 式打字法, 以写博客时输入公式为例子: 如果笔者需要写完一篇介绍某个定理的博客, 那么笔者在打字的时候同时完成以下几件事:</p><ol><li>思考这个定理的证明过程</li><li>组织证明语言</li><li>回想 LaTeX 代码</li><li>在键盘上寻找各个字符的位置, 用蹩脚的指法输入</li></ol><p>对比一下用笔写的过程, 只需要完成前两步, 就可以流利地用笔把内容写出来.<br>抽象程度高的非机械性的工作想要顺畅地完成, 就必须依赖于更为底层的工作的良好运行, 以避免精力的分散;</p></li></ol><h5 id="3-调整-Ctrl-Caps-Lock-和-Shift-的位置"><a href="#3-调整-Ctrl-Caps-Lock-和-Shift-的位置" class="headerlink" title="3. 调整 Ctrl Caps Lock 和 Shift 的位置"></a>3. 调整 <code>Ctrl</code> <code>Caps Lock</code> 和 <code>Shift</code> 的位置</h5><p><code>Cap Lock</code> 键是最不常用的, 偏偏其位置又是个风水宝地, 因此必须让它有多远滚多远;</p><p>按理来说, 目前网上能搜到的最常见的调整方式是将 <code>Ctrl</code> 和 <code>Caps Lock</code> 互换, <code>Shift</code> 保持原位置不变</p><p>笔者还没有真正地尝试这种调整方法, 但是笔者印象中 <code>Shift</code> 键比 <code>Ctrl</code> 键更为常用, 因为代码中包含大量的符号, 而笔者目前还没有养成 左符右<code>Shift</code> 和 右符左<code>Shift</code> 的习惯,因此笔者打算将 左<code>Shift</code>键 挪到原来 <code>Caps Lock</code> 的位置上, 这样做还有另一个好处就是, 如果用左手尾指输入 <code>Shift</code> 键的话, 其他三个手指( 不含大拇指 ) 的长度去按数字键 1-5 刚好比较合适;</p><p>另外, <code>Ctrl</code> 键的使用频率也很高, 因此笔者打算将其放置到原来 <code>Shift</code> 键的位置上, 用左手小指控制; 巧合的是, <code>Ctrl</code> 键与数字键搭配的情况不多, 因此笔者觉得可以没有必要把它放到 home row 的位置上去;</p><p>当然, 以上只是笔者在真正调整键位前的臆想; 真正的效果如何还要等用过才知道;</p><h5 id="4-系统设置"><a href="#4-系统设置" class="headerlink" title="4. 系统设置"></a>4. 系统设置</h5><p><a href="https://blog.pytool.com/linux/linux-keycode-bindkey/" target="_blank" rel="noopener">Linux按键设置</a></p><p>这篇文章写得非常好, 简要清楚地解释了键盘按键工作的原理, 笔者试复述总结如下:</p><pre class=" language-mermaid"><code class="language-mermaid">graph LR  物理按键 --ScanCode--> 键盘驱动;  键盘驱动 --KeyCode--> XServer;  XServer --KeySym--> 上层应用;</code></pre><p>这篇文章介绍的是修改 XServer 的方式, 来改变 KeyCode 和 KeySym 的对应关系;</p><p>首先终端下运行命令 <code>setxkbmap -print</code> 查看键盘方案, 输出如下:</p><pre><code>xkb_keymap {    xkb_keycodes  { include &quot;evdev+aliases(qwerty)&quot;    };    xkb_types     { include &quot;complete&quot;    };    xkb_compat    { include &quot;complete&quot;    };    xkb_symbols   { include &quot;pc+us+us:2+inet(evdev)&quot;    };    xkb_geometry  { include &quot;pc(pc105)&quot;    };};</code></pre><p>其中 xkb_symbol 一项告诉我们目前我们需要关心的文件, 而 <code>pc</code> 文件是辅助键的设置</p><p>我们运行命令 <code>sudo gedit /usr/share/X11/xkb/symbols/pc</code> 打开 ( <strong>注意必须先备份</strong> ) 这个文件</p><p>将对应项修改后, 保存, 退出——具体修改过程参考链接;</p><p>最后, 需要使所做的改动生效, 终端中运行命令: <code>sudo dpkg-reconfigure xkb-data</code> </p><p>成功, 没有遇到什么 bug</p>]]></content>
      
      
      <categories>
          
          <category> 系统调校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端自动记录脚本</title>
      <link href="/posts/automatic-terminal-recorder.html"/>
      <url>/posts/automatic-terminal-recorder.html</url>
      
        <content type="html"><![CDATA[<p>笔者写了一个简单的小脚本，用于自动记录 ubuntu/linux 系统中的终端的输入输出。<br>现将代码以及实现思路记录于此。</p><h1 id="场景与需求"><a href="#场景与需求" class="headerlink" title="场景与需求"></a>场景与需求</h1><p>在 linux 系统下，使用终端是几乎不可避免的，而且对于 linux 而言，命令行才应该是打开 linux 的 “正确方式”；而在命令行下操作，总免不了与天书般的命令、深奥晦涩的输出和提示打交道，时间一久，很容易忘记曾经在命令行下进行过什么操作，并得到什么输出；</p><p>能够记录下曾在命令行下发生的一切事情非常有利于日后的排查和整理，而且大多数的发行版（当然，不包括 ArchLinux 这类）也已经提供了一个现成的命令 <code>script</code>，用于记录终端下的输入输出。然而，这依然不是我们理想中的解决方案，因为我们必须在写入终端之前，调用 <code>script</code> 命令——不难，但很繁琐，且分散注意力（相信我，你在急匆匆打开一个终端往里面输东西的时候——比如在配环境这种令人烦躁的时刻，根本不会记得这种事情）</p><p>我们要让工具适应人，而非反其道而行之。</p><p>我们不妨大胆地设想一个一个理想的终端记录功能/记录器应有的样子：</p><ol><li><strong>每次</strong>打开终端，都可以<strong>自动</strong>记录</li><li><strong>每次</strong>关闭终端的时候，此次打开终端的所有输入输出都可以<strong>自动保存</strong>，而不需要手工地进行一次保存操作</li><li>应该明确告知用户目前是否处于自动记录状态</li><li>记录下的文件按照一定的规则进行保存整理，方便以后查看翻阅</li></ol><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><p>整个脚本只有一段源代码，如下所示：</p><pre class=" language-sh"><code class="language-sh">#automatically record user's terminal - BY JACKSONPS1_bak=${PS1}PS1="(logging)"${PS1}if [ $SHLVL -le 1 ];then    ADDRESS=~/sysconfig/tmlog/    ARCHIVE=${ADDRESS}"archives"    if [ ! -d ${ARCHIVE} ]; then        mkdir -p ${ARCHIVE}    fi    titledate=`date "+%F-%u-%H%M%S"`    # DEBUG    #cat ${ARCHIVE}/${titledate}.tm    script -f -q -a -t 2>${ARCHIVE}/${titledate}.tm ${ARCHIVE}/${titledate}.log    PS1=${PS1_bak}fialias lgd="cd ~/sysconfig/tmlog/archives"# BY JACKSON</code></pre><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>非常简单，只需要复制这段源代码，然后在 <code>/home/${USER}/</code> 目录下的 <code>.bashrc</code> 文件中的最后一段粘贴添加并保存即可。</p><blockquote><p>${USER} 就是当前的用户名</p></blockquote><h1 id="思路解释、特性和难点"><a href="#思路解释、特性和难点" class="headerlink" title="思路解释、特性和难点"></a>思路解释、特性和难点</h1><h2 id="shell类型"><a href="#shell类型" class="headerlink" title="shell类型"></a>shell类型</h2><p>关于 shell 的类型，一般而言有两个维度来衡量：交互式与非交互式，登录与非登录，这两个维度可以组合出四种类型的 shell</p><h3 id="交互式与非交互式"><a href="#交互式与非交互式" class="headerlink" title="交互式与非交互式"></a>交互式与非交互式</h3><p>交互式 shell，故名思义，就是 shell 等待用户的输入，然后执行输入的命令，最后将执行结果输出在屏幕上；就好似 shell 和用户对话一般，这就是交互式 shell。</p><p>那么，非交互式 shell 就很容易理解了，这种类型的 shell 并不会将用户视作交互的对象，而是默默地执行命令，命令多数包含在文件中作为一整个脚本运行，即使有输出或者输出，也不是直接打印在屏幕上，而往往会输出到别的地方（比如文件）</p><h3 id="登录与非登录"><a href="#登录与非登录" class="headerlink" title="登录与非登录"></a>登录与非登录</h3><p>这对概念范畴相对来说比较难理解，笔者查阅过网络上不少资料，在此试着阐述一下自己的理解。</p><p>凡是你打开一个终端，被告知输入用户名和密码的终端，就是登录式终端；而凡是不需要提供这些的，就是非登录式终端。</p><p>请注意，在图形界面打开的终端（实际上是终端模拟器）是<strong>非登录</strong> shell。</p><h2 id="自动运行"><a href="#自动运行" class="headerlink" title="自动运行"></a>自动运行</h2><p>如果我们需要让一个 shell 在打开的时候自动运行某些命令，我们应该去关注 bash 的初始化文件；类似于面向对象范式编程语言中，类的构造函数一样，这些初始化文件会在某些时候（主要指的是 bash 打开或者登录 shell 的时候）执行一些命令，完成关于 shell 的初始化配置。</p><ol><li><p>系统级别的初始化文件：</p><p> 这种类型的文件中的配置是面向系统所有用户的，一般位于 <code>/etc</code> 目录中</p></li><li><p>用户级别的初始化文件：</p><p> 面向的是单个用户</p></li></ol><p>我们不在此列举各个初始化文件，那样只会显得罗嗦和繁琐；最终笔者发现在用户家目录下的 <code>.bashrc</code> 文件可以提供我们需要的特性</p><ol><li>交互式、non-login shell 在<strong>每次</strong>打开的时候都会读取执行这个文件；</li><li>交互式、login shell 一般会读取 <code>~/.bash_profile</code> 这个文件，而它往往又会读取并执行 <code>.bashrc</code> 文件</li></ol><p>非常符合我们的需求，所以我们就在此处添加脚本代码。</p><h2 id="不要踩坑：有关循环调用的问题"><a href="#不要踩坑：有关循环调用的问题" class="headerlink" title="不要踩坑：有关循环调用的问题"></a>不要踩坑：有关循环调用的问题</h2><p>在 linux 命令 <code>script</code> 的 manual 中，提及到了这样一句话：</p><blockquote><p>the inner shell of script is always interactive, and this could lead to unexpected results.  If you use script in the shell initialization file, you have to avoid entering an infinite loop.</p></blockquote><p>意思就是说 script 命令执行后，其应该是 fork 了一个新的交互式 bash shell 出来（尽管除了能够记录输入输出之外，其他地方看上去并没有什么区别），关键在于这个 inner shell 也是交互式的——这将导致循环调用。</p><p>如果我们直接在 <code>.bashrc</code> 文件后面简单添加一行命令 <code>script [-option] [file]</code> 的话，那么在我们打开一个交互式、non-login 的 bash shell 的时候，会执行 <code>.bashrc</code> 中的命令——当然也包括 <code>script</code> 命令；</p><p>而正如上所述，<code>script</code> 命令本身也会 fork 一个新的交互式 shell（同时也是非登录式的，因为它从未要求输入用户名和密码），那么这个新一层调用的 shell 也会执行 <code>.bashrc</code> 中的内容（注意，<code>.bashrc</code> 中的内容是每次打开对应类型的 bash shell 时都会执行的），那么会在这个新 fork 出来的 shell 中再一次执行所有包含在内的命令——自然，也会再一次执行文件末尾的 <code>script</code> 命令。</p><p>于是，死循环调用就这样产生了。</p><p>为了避免这种问题的产生，我们几乎只有一种解决的思路（受水平所限，笔者无法深入 shell 或者 <code>script</code> 命令的内部去做修改），那就是：<strong>让 <code>script</code> 命令只调用执行一次</strong></p><p>经过一定时间的查找，笔者发现在 linux 系统中有一个环境变量 <code>SHLVL</code>，意为 “ Shell Level”，它的值表示当前 shell 处于调用层级的第几层，如一开始打开一个 bash shell，在此 shell 中变量 SHLVL 的值为 $1$，调用一次 <code>script</code> 之后，在窗口中显示此环境变量的值则为 $2$，以此类推。</p><p>因此，笔者所写的源代码具有这样的结构：</p><pre class=" language-sh"><code class="language-sh">// do somethingif [$SHLVL -le 1];then    // do something related to scripts logging    script [-option][file]fi</code></pre><p>如此，在第一次调用 <code>script</code> 命令的时候，新 inner shell 同样也会读取执行 <code>.bashrc</code> 文件，但在执行到 <code>script</code> 所在的部分时，会因为不满足 <code>$SHLVL -le 1</code> 的条件而跳过，从而避免了循环调用的问题。</p><h3 id="child-shell-and-subshell-any-difference"><a href="#child-shell-and-subshell-any-difference" class="headerlink" title="child shell and subshell, any difference?"></a>child shell and subshell, any difference?</h3><p>在查阅环境变量 <code>SHLVL</code> 的时候，笔者得知两个相近但不同的概念：child shell 和 subshell。</p><p>在一个 bash 里面调用另一个 bash（比如 <code>script</code>）会新增一层 child shell 调用，而环境变量 <code>SHLVL</code> 记录的正是 bash 进程嵌套深度——对应地，另一个环境变量 <code>BASH_SUBSHELL</code> 记录一个 bash 进程中多个 subshell 的嵌套深度，但我们此处无需用到。</p><h2 id="特性：无需手动保存"><a href="#特性：无需手动保存" class="headerlink" title="特性：无需手动保存"></a>特性：无需手动保存</h2><p>在笔者的需求设想中，脚本除了使 bash 一打开就自动进行记录之外，还无需在退出前输入 <code>exit</code> 退出 <code>script</code> bash shell 进程就能自动将终端记录保存至文件。</p><p>为了实现这一特性，笔者想到了两种思路：</p><p>第一种思路，就是在终端退出前自动执行 <code>exit</code> 命令；<br>笔者经过查阅，得知有一个名为 <code>.bash_logout</code> 的文件，但它是针对登录 shell 的，在 logout 之前自动执行文件中的命令；</p><p>另外，stackexchange 上也有一些相似的问题，其主要思路是捕获 bash shell 退出的 signal，被此 signal 触发后执行一段命令；但问题在于，这种方法只针对的在 bash 中使用命令（如 <code>exit</code> 等）退出的情形；如果在图形界面直接用鼠标点击关闭终端模拟器，类似与直接杀死进程，和使用命令退出是两回事，而很多时候我们都往往会用后者关闭终端模拟器——如果都用到 <code>exit</code> 退出终端了，还会介意用 <code>exit</code> 退出 <code>script</code> 么？然而直接鼠标点击关闭时，这种方法不会起奏效。</p><p>幸好，<code>script</code> 命令本身提供了 <code>-f/--flush</code> 参数，顾名思义，这个参数使得 <code>script</code> 命令在其 inner shell 的<strong>每次</strong>写入之时，都<strong>同时</strong>将内容写入文件（如果不加这个参数，那么默认在使用 <code>exit</code> 退出 <code>script</code> shell 时一次性保存）——这个参数选项的存在，不仅使得直接达到 “无需手动保存” 的要求，从某种意义上说，比原先的要求还更进一步：即使我们做到每次退出前自动保存，但难免会出现非正常退出的情形，这种情形下实时写入文件保存至少仍能最大程度地保留终端交互的内容。</p><h3 id="注意：不能在-script-inner-shell-中直接回放该-shell-已保存的交互内容"><a href="#注意：不能在-script-inner-shell-中直接回放该-shell-已保存的交互内容" class="headerlink" title="注意：不能在 script inner shell 中直接回放该 shell 已保存的交互内容"></a>注意：不能在 script inner shell 中直接回放该 shell 已保存的交互内容</h3><p>实时 flush 从另一方面，要求我们不能在打开一个 script shell 而未退出时，直接使用 <code>scriptreplay</code> 或者 <code>cat</code> 等命令对这同一个 inner shell 已经保存的内容进行回放——这将导致无限读写循环。</p><p>我们试以一个例子说明之。</p><p>假设我们已经执行 <code>script</code> 命令：</p><ol><li>进行一次交互式输入输出，交互内容记为 $P$，同时 $P$ 被写入文件；</li><li>不退出当前 inner shell，直接回放当前 shell 对应记录文件中的内容；</li><li>$P$ 作为回放输出呈现在屏幕上，由于 <strong><code>script</code> 会将终端所有内容记录下来，并且 <code>--flush</code> 选项会在每次交互时同步写入文件</strong>，因此，$P$ 会再次被保存到文件中</li><li>此时回放程序读取到的位置刚好是第二部中调用回放程序自身的时刻，它会继续向下读取，把 $P$ 的第一次回放所留下的记录又一次回放出来，而本次回放将依然记录到文件中去；</li></ol><p>于是，内容 $P$ 的每一次回放都会作为输出内容被保存到文件中去（而且是在原有内容上追加），从而作为后续的回放内容再次输出——这就成了一个死循环。</p><p>因此，为了避免循环输出，在需要翻看从前的 script log 时，<strong>请一定记得退出 script 本身，并在原来底层的 bash shell 进程中使用其他回放程序查看</strong> </p><h2 id="终端提示符修改"><a href="#终端提示符修改" class="headerlink" title="终端提示符修改"></a>终端提示符修改</h2><p>受 Anaconda 的启发，笔者也想对终端提示符进行配置，使其能够提示用户当前是否处于 <code>script</code> 命令的 shell 中（正如上一小节所述，用户如果要调阅之前的记录，需要在底层的 bash shell 中查看，如果可以直接根据终端提示符来判断会更加方便）</p><p>可以通过修改环境变量 <code>PS1</code> 的内容，来修改终端提示符——并且随着变量 <code>PS1</code> 的值的改变，提示符也会<strong>实时</strong>改变；</p><p>笔者的脚本中关于终端提示符的流程逻辑如下：</p><pre class=" language-sh"><code class="language-sh">// action1: modify the terminal promptif [ $SHLVL -le 1 ];then    script [-option][file]    // action2: restore the terminal promptfi</code></pre><ol><li><p>第一次打开终端：</p><ul><li>bash shell 自动执行 <code>.bashrc</code>， 至 action1 处底层 bash 提示符添加 “logging” 标识；</li><li>执行 <code>script</code> 命令，inner shell 内样执行 <code>.bashrc</code>，inner bash 同样添加 “logging” 标识；</li><li>执行 <code>exit</code> 命令，inner shell 进程结束，返回至底层 shell；</li><li>底层 shell 的 <code>.bashrc</code> 文件此时未执行完毕，而是执行至 action2 命令，此时将提示符 “logging” 标识去掉，恢复原样；</li></ul></li><li><p>退出 script shell 后再次调用 <code>script</code> 命令</p><ul><li>如前所述，<strong>第一次退出</strong> script shell 后，底层 bash shell 的提示符已经没有 “logging” 标识；</li><li>再次调用 <code>script</code> 命令，自动执行 <code>.bashrc</code> 脚本至 action1 处， inner shell 提示符添加 “logging” 标识；</li><li>第二次退出 script shell，回到底层 bash shell，提示符呈现无标识状态</li></ul></li></ol><p>就这样，第一次调用退出，和之后的调用退出，流程逻辑略有不同，但结合在一起就可以实现相同的 “记录时则有标识，不记录则无标识” 的提示效果；</p><h2 id="记录档案保存规则"><a href="#记录档案保存规则" class="headerlink" title="记录档案保存规则"></a>记录档案保存规则</h2><p>字符文件和时间轴文件按照日期时间命令，存储在指定目录 <code>ARCHIVE</code> 中；</p><p>注意，日期时间精确到秒，因此，排除一次性同时打开两个终端的情况——每一次打开终端都会生成单独的两个记录文件</p><p>为什么要精确到秒，请看下一节</p><h1 id="待续：未完善之处"><a href="#待续：未完善之处" class="headerlink" title="待续：未完善之处"></a>待续：未完善之处</h1><h2 id="时间轴文件的追加问题，以及当前所采用的取巧解决方法"><a href="#时间轴文件的追加问题，以及当前所采用的取巧解决方法" class="headerlink" title="时间轴文件的追加问题，以及当前所采用的取巧解决方法"></a>时间轴文件的追加问题，以及当前所采用的取巧解决方法</h2><p>如果您仔细阅读笔者的源代码，您会发现脚本的核心代码如下：</p><pre class=" language-sh"><code class="language-sh">script -f -q -a -t 2>${ARCHIVE}/${titledate}.tm ${ARCHIVE}/${titledate}.log</code></pre><p><code>-f</code> 的含义上面已经解释，<code>-q</code> 表示记录时静默，<code>-a</code> 表示如果待写入的目标文件已经存在则在文件末尾追加记录（而非覆盖），<code>-t</code> 以及后面的重定向输出表示记录并保存交互内容的时间轴；</p><p>一切看上去都很美好，但是……</p><p>在笔者一开始的设想中，记录文件是按照日期生成的——可以预见的是，一天之内，肯定不止一次打开终端，因此也就是说，一天之内，我们需要多次调用 <code>script</code> 命令往同一个文件（准确说是两个文件，字符和时间轴）中写入，因此在代码中才特意加上 <code>-a</code> 选项；</p><p>但问题就是，这个选项只对字符文件有效，而在记录时间轴的文件在每次重新调用 <code>script</code> 时原有的内容会被覆盖。</p><p>笔者找了许多方法也没有正面解决时间轴输出覆盖的问题；因此，之所以前面笔者强调记录文档的生成需要精确到 秒，正是绕开了文件追加的问题采取的取巧折中的办法——当然前提是，一次性只打开一个终端，正好符合笔者的操作习惯</p><h2 id="记录多个同时打开的终端？"><a href="#记录多个同时打开的终端？" class="headerlink" title="记录多个同时打开的终端？"></a>记录多个同时打开的终端？</h2><p>继续上面的讨论，笔者在撰写这篇博文之前，得到过一位优秀的朋友兼师弟的提议。他说他自己平时使用终端的习惯是同时打开多个终端进行不同的任务，因此他建议笔者继续改进，以实现可以记录多个终端交互内容的功能——这目前还未能做到。</p><p>不过，由于时间精力所限，这件事恐怕得放到以后了。</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 系统调校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客测试</title>
      <link href="/posts/blog-tester.html"/>
      <url>/posts/blog-tester.html</url>
      
        <content type="html"><![CDATA[<p>此处用于测试自定义页面在远程的访问入口以及显示效果：<a href="../custom_page/MPE-test/MPE-test.html">超链接</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Configuration of my blog</title>
      <link href="/posts/Configuration-of-my-blog.html"/>
      <url>/posts/Configuration-of-my-blog.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇博文旨在记录笔者第二次搭建博客，更换主题的过程和配置；在这次折腾的过程中，笔者对于 hexo + github pages 的博客搭建原理有了更深的理解，因此本文一方面是对这些原理的阐述，另一方面也是记录下自己做过那些配置修改，以防日后遗忘。</p><h1 id="搭建原理"><a href="#搭建原理" class="headerlink" title="搭建原理"></a>搭建原理</h1><p>笔者对前端几乎一无所知，因此以下的内容有许多是笔者的推断</p><ol><li><p>github 与 github pages</p><p> github 会提供许多个 repos，这些 repos 本来是专门提供给用户进行代码或者其他文件的存放（当然还有在线协作、版本控制等非常强大的功能）</p><p> 而用户可以新建一个以 “[自己帐号名].github.io” 的 repos, 这个 repos 是每个 github 帐号唯一的。</p><p> 用户可以登陆 github，在其中设置启动 github pages 功能，并将其 “连接” 到上面所说的 repos；</p><p> github pages 有两个功能</p><ul><li><p>其内部已经配置好了 Jekyll，用户可以借助这个框架上传一些文件，后者将自动生成静态文件</p><p><strong>注：笔者的博客的搭建是在本地完成的，而且是借助 hexo 生成的，因此这个特性笔者其实用不到，不仅如此，貌似国内相当多的使用 github pages 搭建博客的 blogger 也是本地生成静态文件，从而也用不到这一特性</strong></p></li><li><p>将相关联的 repos 中的一系列静态文件渲染成页面，从而可以在网络上通过域名 “https://[自己帐号名].github.io” 来访问；</p><p>本博客的搭建用到了第二个功能，这是本博客可以在网络上正常访问的基础。</p></li></ul></li><li><p>Hexo 与 静态文件</p><p> 其实，Hexo 是一个静态网页生成器，它的作用就是将用户的写好的内容（比如最常见的 .md 文件）转换成静态的页面文件（如 html 等）；</p><p> 这样转换的意义在于，生成的静态网站的几乎一切格式、样式、装饰、插件都不需要用户去操心，因为这些东西都可以由 hexo 框架以及 hexo 主题去提供；</p><p> 通俗地讲就是，用户只负责写 .md 文件，这好比人的灵魂；但是 .md 文件中除了一般的文本之外包含许多富文本内容，需要一些程序读取、转换并正确地显示，而这些转换生成的文件相当于血肉，转换程序相当于营养物质；转换生成的内容引入了许多新的辅助信息，比如页面的样式应该是怎么样的，页面应该如何编排，这些信息好比骨架；最后，还有一些辅助的插件相当于装饰或者衣物；</p><p> 从头到尾，用户理论上需要关心的是两件事：</p><ul><li><p>.md 文件的编写；</p></li><li><p>hexo 以及其主题提供的（在生成静态页面过程中的）部分设置项</p><p>在做好这些工作之后，hexo 附带的 hexo-deployer-git 插件就可以把生成的静态文件（博客根目录下的 public 目录）推送到设定好的 github repo 上；</p><p>而我们预先设定好推送的目标 repo 正是 github 用户的个人 repo，那么整个工作流得以完整地串联起来，最终可以通过 github 的域名去访问。</p></li></ul></li></ol><h1 id="框架与主题选择"><a href="#框架与主题选择" class="headerlink" title="框架与主题选择"></a>框架与主题选择</h1><ol><li><p>本地静态页面生成框架：Hexo</p><p> 网址：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://hexo.io/</a></p><p> 选择理由：坦白地说，这个框架据说已经不是最好的静态页面生成框架了，比如它生成速度较慢，而且文档也写得非常简略，但是胜在配置较为简单，而功能却能大致满足需求；另外，这个框架在国内相对流行，因此找资料更加便捷；</p><p> 同时，笔者也不是太想继续折腾了，还是把有限的时间花在刀刃上吧，毕竟写博客只是一种情怀，又不能赚钱；</p></li><li><p>hexo 主题：hexo-theme-matery</p><p> github 项目地址：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a><br> 作者自己的博客：<a href="https://blinkfox.github.io/" target="_blank" rel="noopener">https://blinkfox.github.io/</a></p><p> 选择理由：</p><ul><li><p>好看</p></li><li><p>功能还算丰富，集成程度高</p></li><li><p>配置好像比 Next 主题稍微更加简单</p><p>缺点：</p></li><li><p>文档不是十分详细</p></li><li><p>用的人比较少（这是优点也是缺点），作者也不是十分活跃</p></li><li><p>美化程度较高，所以速度较慢</p></li></ul></li></ol><h1 id="笔者需要在博客中展示的内容"><a href="#笔者需要在博客中展示的内容" class="headerlink" title="笔者需要在博客中展示的内容"></a>笔者需要在博客中展示的内容</h1><p><strong>以下的需求是恒定的，不会因为所选框架或者主题的不同而发生改变。</strong></p><ol><li><p>markdown 原始特性：包括分级标题，强调，列表等</p><ul><li><p>重要级别：0</p></li><li><p>这是最最基础的特性，word 太恶心，原始的 LaTeX 又太过复杂，markdown 写起来是最舒服的；谢天谢地——大多数的 blogger 也是这样想的，所以几乎所有的博客框架都默认接受 .md 文件作为输入</p></li></ul></li><li><p>兼容 LaTeX 数学环境语法的 mathjax</p><ul><li><p>重要级别：0.5</p></li><li><p>笔者博客的主体部分要么是数学方面的内容，要么与数学或多或少相关联——所以如果全世界的博客都不支持数学公式，那笔者宁可不写博客</p></li></ul></li><li><p>图片</p><ul><li><p>重要级别：0.5</p></li><li><p>其重要级别如此高的原因是，学术或者技术性的文章（比如立体几何、图论等）有相当多的内容必须借助图片来表达，亦或者通过图片方可高效直观地表达</p></li><li><p>最好支持矢量图、动态图</p></li><li><p>图片的制作一般需要借助其他程序（Mathematica、LaTeX、Python、Geogebra 等）</p></li></ul></li><li><p>常用图形：graphviz, mermaid, flowchart, sequence-diagrams 等</p><ul><li><p>重要级别：1</p></li><li><p>这些图形特别适合用来表达抽象层面的概念、思路和逻辑，是理工科经常需要使用的有力工具</p></li><li><p>之所以重要性略低于上一项，是因为这些图形可以通过其他软件生成，再作为图片插入文档；只是这样做显得麻烦，而且资源多了之后，会有一种比较凌乱的感觉，因此最好还是以代码的形式直接在原文档中渲染；</p></li></ul></li><li><p>超链接</p><ul><li><p>重要级别：1.5</p></li><li><p>即使借助目录和分层，一篇文章的内容也是有上限的，因此我们需要借助超链接进行文章间的联系；</p></li><li><p>同时，由于笔者在本站中进行了某些自定义的配置（下面会提到），因此超链接的重要程度比原来更上一层</p></li></ul></li><li><p>代码块</p><ul><li><p>重要级别：2</p></li><li><p>理论上讲，如果不支持代码块的渲染，直接将代码以文本形式放到文档中也是可行的，只不过显示效果会非常糟糕；对于笔者这个（伪）计算机专业的人来说，还是很重要的；</p></li></ul></li><li><p>表格</p><ul><li><p>重要级别：2</p></li><li><p>与前者相似，不是没有它就不行，但是有了它会带来非常大的便利</p></li></ul></li><li><p>目录</p><ul><li><p>重要级别：2</p></li><li><p>对于长文章或者内容层次非常多的文章而言，极为有用</p></li></ul></li><li><p>锚点与页内跳转</p><ul><li><p>重要级别：2.5</p></li><li><p>大大增强读者的阅读体验</p></li></ul></li><li><p>脚注：</p><ul><li><p>重要级别：3</p></li><li><p>某些较为正式的文章会用到；</p></li></ul></li><li><p>扩展语法：任务列表, 上下标, 缩略, 高亮标记, CriticMarkup, Emoji</p><ul><li><p>重要级别：3.5</p></li><li><p>锦上添花的特性</p></li></ul></li></ol><h1 id="笔者理想中博客应具的特性"><a href="#笔者理想中博客应具的特性" class="headerlink" title="笔者理想中博客应具的特性"></a>笔者理想中博客应具的特性</h1><ol><li><p><a href="#笔者需要在博客中展示的内容">上一章节</a>中的特性完全可以正常在页面上展示或者被支持</p></li><li><p>博文应该可以进行多级分类，并且所有博文从上至下形成一个树状结构（类别之间不相交）</p></li><li><p>可以给博文定义标签，不同标签之间可以自由选择</p></li><li><p>有对整个博客站点的全貌进行展示的页面</p></li><li><p>博文展示逻辑（哪些放在最显眼的位置，哪些可以往后稍稍）可以灵活定义</p></li><li><p>可以在各个平台上（如PC、平板、移动端）访问，且显示效果不会有太大变化</p></li><li><p>（博文的）松散型与紧密型组织方式相结合</p></li><li><p>附加功能：</p><ul><li><p>站内搜索</p></li><li><p>评论系统</p></li><li><p>主题自定义美化</p></li><li><p>RSS</p></li><li><p>内部数据统计（文章数、字数、分类与标签）</p></li><li><p>外部数据统计（访客数、访问次数）</p></li><li><p>友链</p></li></ul></li></ol><h1 id="博客内容编排"><a href="#博客内容编排" class="headerlink" title="博客内容编排"></a>博客内容编排</h1><h2 id="自定义-html-页面"><a href="#自定义-html-页面" class="headerlink" title="自定义 html 页面"></a>自定义 html 页面</h2><p>所谓自定义页面，就是指笔者直接在本地生成无依赖的 html 文件（当然资源文件还是需要的，但是不需要 css 等文件），然后在这些 html 页面中记录真正的内容主体，并将这些页面文件以某种方式插入博客中；</p><p>这些页面完全是手动生成的，其背景、样式和博客的模板没有任何直接的关系，基本上就是类似于 word 或者 pdf 文件那样，文章内容被直接呈现在空白的页面上。</p><h3 id="为什么要自定义？直接用-Hexo-解析渲染-md-文件不好吗？"><a href="#为什么要自定义？直接用-Hexo-解析渲染-md-文件不好吗？" class="headerlink" title="为什么要自定义？直接用 Hexo 解析渲染 md 文件不好吗？"></a>为什么要自定义？直接用 Hexo 解析渲染 md 文件不好吗？</h3><ol><li><p>首先，博客撰写是在本地进行的，使用的 markdown 编辑器是 VS Code + Markdown Preview Enhanced。后者（下简称 MPE ）应该是已知的功能最强大的 markdown 编辑程序，<strong>它集成了种类丰富的前端插件，并支持<a href="#笔者需要在博客中展示的内容">笔者想要展示的所有内容</a></strong>，它是笔者写 markdown 的平台标准；</p></li><li><p>如果还是按照以前的方式，把 md 文件直接放在 hexo 博客目录中，那么 md 文件的解析和渲染就是由 hexo 框架内部的程序完成的，这样会带来几个问题：</p><ul><li><p>页面部分内容有可能没有办法被 hexo 支持，比如 Graphviz 图形，之前笔者就没有找到它的 hexo 插件；</p></li><li><p>有些内容可能没有办法被正确地转换显示，比如笔者之前第一次搭建博客的时候，某些插件的原因导致数学公式的解析出现了一些混乱，最终解析后页面中的部分内容不能转换成可以被 mathjax 正确渲染的形式——最终还是直接安装 pandoc 并使用其渲染才解决此问题；</p></li><li><p>即使可以正确转换显示，最终的效果也有可能和本地生成的效果不一样；</p></li><li><p>最后一点，如果要在 hexo 中支持各种富文本内容，需要安装配置许多插件，有些甚至需要在系统中安装依赖程序（pandoc），过于麻烦；</p></li></ul></li></ol><p>鉴于以上正反对比，笔者还是选择了本地直接生成 html 页面的方式，这样做的缺点在于，无论自己写博客还是读者看博客都稍显麻烦，但换来的好处是页面内容和展示效果能被严格掌控，组织方式也更为灵活。</p><h3 id="如何生成自定义的页面"><a href="#如何生成自定义的页面" class="headerlink" title="如何生成自定义的页面"></a>如何生成自定义的页面</h3><p>使用 VS Code 中 MPE 插件的 “导出 html” 功能，点击后即可直接在 md 文件相同目录下生成单独的一个 html 文件，这个 html 文件可以直接打开，显示效果与 MPE 预览效果几乎是一样的。</p><p>需要注意几点：</p><ul><li><p>html 文件默认需要和其引用的资源文件（txt, png, svg 等）放在一起——当然，在 md 源文件的选项中也可以设置将图片以 base64 编码<strong>嵌入</strong>到 html 中；</p></li><li><p>笔者自定义了 MPE 内部的 css 样式，这部分设置会写入 html 文件中，无需链接 css 也能生效；</p></li><li><p>导出时的选项是 html(cdn hosted)，这样才会促使浏览器在网上的 cdn 服务器中去寻找 mathjax、mermaid 等内容所依赖的 JS 库</p></li></ul><h3 id="如何嵌入到-hexo-生成的博客主体"><a href="#如何嵌入到-hexo-生成的博客主体" class="headerlink" title="如何嵌入到 hexo 生成的博客主体"></a>如何嵌入到 hexo 生成的博客主体</h3><p>Hexo 生成的静态文件位于本地博客根目录下的 public 文件夹；不难发现，md 文件其实就是被渲染成了 html 文件，而且这些文件在浏览器上的访问链接和其目录组织是<strong>一一对应</strong>的</p><p>我们假设 github 的用户名为 Tony, repo 的名字为 Tony.github.io；</p><ul><li><p><a href="https://Tony.github.io" target="_blank" rel="noopener">https://Tony.github.io</a> 显示的页面就是 repo 根目录 <code>/</code> 下的 index.html</p></li><li><p><a href="https://Tony.github.io/documentary1/" target="_blank" rel="noopener">https://Tony.github.io/documentary1/</a> 显示的页面就是 repo 目录 <code>/documentary/</code> 下的 index.html</p></li></ul><p>于是，我们只须将页面文件（连带必须的文件）上传至 对应 repo 的目录下，就可以直接通过 url 来访问了。</p><p>还有一个关键的问题，如何不被 Hexo 处理而直接上传至 github？<br>注意到在博客配置文件 <code>_config.yml</code> 中有一项为</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Directory</span><span class="token punctuation">...</span><span class="token punctuation">...</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> </code></pre><p>这个选项正是用以标记不需要经过渲染而直接上传到 github repo 的目录和文件的。换句话说，Hexo 原生支持 “不经渲染直接上传” 这一特性（感谢作者）。</p><p>我们把这一项作如下设置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> custom_page/**</code></pre><p>注意这一项默认将 <code>/sourse</code> 视作根目录，因此上一项实际指向的对象就是：目录 <code>/source/custom_page/</code> 以及其所有的子目录和文件。</p><h2 id="将部分博文汇集成册"><a href="#将部分博文汇集成册" class="headerlink" title="将部分博文汇集成册"></a>将部分博文汇集成册</h2><p>在 <a href="#笔者理想中博客应具的特性">笔者理想的博客特性</a>中，笔者提到过最好可以自己决定博文的组织形式偏松散还是偏紧密。</p><p>因此，在前面所述生成插入自定义界面的基础上，笔者想到可以将这些博文汇集成 “册”：</p><ul><li><p>生成普通的博文</p></li><li><p>在该博文中添加多个指向自定义页面的链接</p></li></ul><p>这样，多个逻辑上紧密关联的自定义 html 页面就汇集在了一起——以一种朴素的方式。</p><p>这种组织方式特别适合用于某门课程或者某个学科的笔记、习题集，以及单词本、摘抄积累等内容。</p><h1 id="博客具体配置"><a href="#博客具体配置" class="headerlink" title="博客具体配置"></a>博客具体配置</h1><p>本节记录在此次搭建博客过程中，各项配置的具体内容</p><h2 id="Hexo-框架配置"><a href="#Hexo-框架配置" class="headerlink" title="Hexo 框架配置"></a>Hexo 框架配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="站点基本信息配置"><a href="#站点基本信息配置" class="headerlink" title="站点基本信息配置"></a>站点基本信息配置</h4><p>位置：<code>/_config.yml</code></p><p>相关项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Googolplex<span class="token punctuation">-</span>C<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 10^googol<span class="token key atrule">description</span><span class="token punctuation">:</span> 没什么好看的，关了吧<span class="token key atrule">keywords</span><span class="token punctuation">:</span> Maths<span class="token punctuation">,</span>Computer<span class="token punctuation">-</span>Science<span class="token punctuation">,</span>Technology <span class="token key atrule">author</span><span class="token punctuation">:</span> Googolplex<span class="token punctuation">-</span>C<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CNtimezone<span class="token punctuation">:</span></code></pre><h4 id="post（博文）链接优化与目录组织"><a href="#post（博文）链接优化与目录组织" class="headerlink" title="post（博文）链接优化与目录组织"></a>post（博文）链接优化与目录组织</h4><h5 id="普通-posts-目录组织设置"><a href="#普通-posts-目录组织设置" class="headerlink" title="普通 posts 目录组织设置"></a>普通 posts 目录组织设置</h5><p>位置：<code>/_config.yml</code></p><p>配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//googolplex<span class="token punctuation">-</span>c.github.io/<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token comment" spellcheck="true"># permalink: :year/:month/:day/:title/</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>url.htmlpermalink_defaults<span class="token punctuation">:</span></code></pre><p>这几项设置的是站点链接结构。以下是笔者自己的理解：</p><ol><li><p><code>url</code> 一项设置站点的根 url，</p></li><li><p><code>root</code> 一项设置 repo 中的站点的根目录，它与前一项是对应的，访问这个 url 就对应打开根目录下的 index.html 文件的操作；</p></li><li><p><code>permalink</code> 一项非常有用，它的默认值是 “:year/:month/:day/:title/”，也即是说，如果有一篇博文，其 front-matter的 <code>date</code> 和 <code>title</code> 两项的值分别是：<code>2018 01 02 00:00:00</code> 和 <code>Hi Iron Man</code>，那么这篇博文就会以如下方式生成：</p><p> <code>/2018/01/01/Hi Iron Man/index.html</code></p><p> 进而对应的 url 为 <a href="https://Tony.github.io/2018/01/01/Hi-Iron-Man/index.html" target="_blank" rel="noopener">https://Tony.github.io/2018/01/01/Hi-Iron-Man/index.html</a></p></li></ol><p>把 <code>permalink</code> 一项设为 <code>posts/url.html</code> 的效果是：</p><ul><li>每一篇博文不再单独地存储在各自单独的目录中，命令也不再是 index.html，而是从 md 文件 front-matter 中提取 url 作为文件名；</li></ul><p>这样设置基于几个考虑：</p><ol><li>posts 生成的静态页面的目录组织形式与本地目录 <code>/source</code> 中保持一致，这样在 markdown 正文中通过相对路径进行<strong>页面间链接</strong>时，无论是本地还是远程都可以正确地链接，无需再修改</li><li><code>permalink</code> 一项可以使用 posts 中的一切 front-matter，因此 <code>:url</code> 一项是笔者自定义的，<strong>使用的时候 <em>规定</em> 必须使用英文手动填写</strong>；之所以不使用 <code>:title</code>，是因为有些时候标题难免使用中文，而中文生成的链接会导致很多问题，也不利于 SEO。</li><li>注意这个 posts 文件夹名称和本地的文件夹名称是不一样的，前者开头没有下划线，因为下划线开头的目录推送到远程会被 github pages 忽略！！</li></ol><h5 id="自定义页面目录设置"><a href="#自定义页面目录设置" class="headerlink" title="自定义页面目录设置"></a>自定义页面目录设置</h5><p>自定义页面（连同资源文件）在本地的存放位置是：<code>/source/custom_page/[页面名]/</code>；</p><p>同时在博客配置文件中设置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Directory</span><span class="token punctuation">...</span><span class="token punctuation">...</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> custom_page/**</code></pre><h5 id="目标效果"><a href="#目标效果" class="headerlink" title="目标效果"></a>目标效果</h5><p>推送到远程的静态文件——无论是由 Hexo 生成的还是自定义生成的——他们的目录组织和本地保持一致；</p><p>本地的情形：</p><ul><li><p>/</p><ul><li><p>（其它目录）</p></li><li><p>custom_page</p><ul><li><p>test1</p><ul><li><p>test1.html</p></li><li><p>pic.png</p></li></ul></li></ul></li><li><p>_posts</p><ul><li><p>test2.md</p></li><li><p>test2  (as an asset folder)</p></li></ul></li></ul></li></ul><p>github repo 上的组织：</p><ul><li><p>/</p><ul><li><p>（其它目录）</p></li><li><p>custom_page</p><ul><li><p>test1</p><ul><li><p>test1.html</p></li><li><p>pic.png</p></li></ul></li></ul></li><li><p>posts</p><ul><li><p>test2.html</p></li><li><p>test2  (as an asset folder, existing only if not empty)</p></li></ul></li></ul></li></ul><p>在此前提下，自定义页面和 Hexo 生成页之间的相互引用就可以通过相对路径形式的超链接 <code>[title](link)</code> 来实现啦。</p><p>这里的设置对于前面的 <a href="#将部分博文汇集成册">博文汇成册</a> 的目标而言相当关键，同时也是笔者重新编排博客内容和目录组织这个大目标中的重要一环。</p><h4 id="写作配置"><a href="#写作配置" class="headerlink" title="写作配置"></a>写作配置</h4><pre class=" language-yml"><code class="language-yml"># Writingnew_post_name: :year-:month-:day-:title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight:  enable: false  line_number: true  auto_detect: false  tab_replace:</code></pre><p>笔者在此处更改了几项：</p><ol><li><code>new_post_name</code> 这一项定义的是新建 posts 的时候，md 文件的命名模板，注意此处以半角冒号 : 开头的 <code>:XXX</code> 是 front-matter 中的参数；其中 <code>:title</code> 这一项就是 <code>hexo new &lt;title&gt;</code> 中的 <code>&lt;title&gt;</code> 部分，笔者此处的设置的目的是<strong>自动在文件名前面加上日期</strong>（因为前面已经说明了所有的博文位于同一目录，因此以日期编排会更加有序），当然，在 front-matter 中 <code>title</code> 一项不会包含日期；</li><li><code>post_asset_folder: true</code> 一项设为 <code>true</code>，这样每生成一个 post，都会新建一个与其 <strong>文件名</strong> 相同的文件夹，用以存储资源文件。</li><li><code>external_link</code> 一项设为 <code>true</code></li><li><code>highlight</code> 一项设为 <code>false</code>，自带的代码高亮真的是太丑了！！</li></ol><h4 id="启用哪个主题"><a href="#启用哪个主题" class="headerlink" title="启用哪个主题"></a>启用哪个主题</h4><pre class=" language-yml"><code class="language-yml"># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-matery</code></pre><p>本设置项决定启用本地 <code>/theme/</code> 下的哪个主题</p><h4 id="远程部署设置"><a href="#远程部署设置" class="headerlink" title="远程部署设置"></a>远程部署设置</h4><pre class=" language-yml"><code class="language-yml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:Googolplex-C/Googolplex-C.github.io.git  branch: master</code></pre><p>这里用于设置部署方式，远程库的链接，以及远程库的部署分支上。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><h4 id="安装-hexo-generator-search，用以支持站内搜索"><a href="#安装-hexo-generator-search，用以支持站内搜索" class="headerlink" title="安装 hexo-generator-search，用以支持站内搜索"></a>安装 hexo-generator-search，用以支持站内搜索</h4><p>在博客的根目录下，输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>博客根目录下的 _config.yml 文件中，新增以下的配置项</p><pre class=" language-yml"><code class="language-yml">search:  path: search.xml  field: post</code></pre><h4 id="安装-hexo-wordcount，用以统计（每一篇）文章字数"><a href="#安装-hexo-wordcount，用以统计（每一篇）文章字数" class="headerlink" title="安装 hexo-wordcount，用以统计（每一篇）文章字数"></a>安装 hexo-wordcount，用以统计（每一篇）文章字数</h4><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在<strong>主题目录</strong>下的 _config.yml 文件中，激活以下配置项即可：</p><pre class=" language-yml"><code class="language-yml">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h4 id="安装-hexo-generator-feed，添加-RSS-支持"><a href="#安装-hexo-generator-feed，添加-RSS-支持" class="headerlink" title="安装 hexo-generator-feed，添加 RSS 支持"></a>安装 hexo-generator-feed，添加 RSS 支持</h4><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class=" language-yml"><code class="language-yml">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><h4 id="安装-hexo-prism-plugin-插件"><a href="#安装-hexo-prism-plugin-插件" class="headerlink" title="安装  hexo-prism-plugin 插件"></a>安装  hexo-prism-plugin 插件</h4><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><h2 id="新主题有哪些（内置）新特性"><a href="#新主题有哪些（内置）新特性" class="headerlink" title="新主题有哪些（内置）新特性"></a>新主题有哪些（内置）新特性</h2><ul><li><strong>Banner 封面轮播文章（好）</strong></li><li>“我的梦想” 展示板（鸡肋）</li><li>首页的音乐播放器和视频播放器配置（用不到）</li><li><strong>显示推荐文章名称和按钮配置（即首页有一块版面用于显示 “推荐文章”，由 md 文件 front-matter 中的 <code>top</code> 一项控制）</strong></li><li><strong>个人信息（也就是 about 页面）</strong></li><li><strong>文章打赏信息（好东西）</strong></li><li><strong>复制文章内容时追加版权信息（好东西）</strong></li><li>MathJax（Hexo 自身的解析有问题，所以支持 mathjax 也没有什么用，而且有公式的内容笔者都会放到自定义页面中去）</li><li><strong>文章字数统计、阅读时长（好东西，需要安装插件）</strong></li><li><strong>文章加密（好东西！）</strong></li><li>点击页面的’爱心’效果（花里胡哨）</li><li>我的项目（有点用）</li><li>我的技能（装逼用）</li><li>我的相册（好像没什么用）</li><li><strong>Gitalk、Gitment、Valine 和 disqus 评论配置（好，非常好）</strong></li><li><strong>不蒜子统计和谷歌分析（Google Analytics）（好，非常好）</strong></li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图（增加一些美观程度）</li></ul><h2 id="hexo-theme-matery-配置"><a href="#hexo-theme-matery-配置" class="headerlink" title="hexo-theme-matery 配置"></a>hexo-theme-matery 配置</h2><h3 id="新建导航页面"><a href="#新建导航页面" class="headerlink" title="新建导航页面"></a>新建导航页面</h3><h4 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h4><p>categories 页是用来展示所有分类的页面，命令如下：</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/categories/index.md，至少需要以下内容：</p><pre class=" language-yml"><code class="language-yml">title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"</code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><p>tags 页是用来展示所有标签的页面，命令如下：</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容：</p><pre class=" language-yml"><code class="language-yml">title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"</code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><p>about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about/index.md 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/about/index.md，至少需要以下内容：</p><pre class=" language-yml"><code class="language-yml">title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"</code></pre><h4 id="新建友情连接-friends-页（可选，但笔者还是做了）"><a href="#新建友情连接-friends-页（可选，但笔者还是做了）" class="headerlink" title="新建友情连接 friends 页（可选，但笔者还是做了）"></a>新建友情连接 friends 页（可选，但笔者还是做了）</h4><p>friends 页是用来展示友情连接信息的页面，如果在你的博客 source 目录下还没有 friends/index.md 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yml"><code class="language-yml">title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"</code></pre><p>同时，在博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>以上只作举例，因为这些其实都是主题作者的 “朋友们”，和笔者无关。</p><h3 id="内置特性开启与主题美化"><a href="#内置特性开启与主题美化" class="headerlink" title="内置特性开启与主题美化"></a>内置特性开启与主题美化</h3><h4 id="封面轮播功能与推荐文章"><a href="#封面轮播功能与推荐文章" class="headerlink" title="封面轮播功能与推荐文章"></a>封面轮播功能与推荐文章</h4><p>hexo-theme-matery 主题的首页展示文章的方式并不如某些其它主题只有单一的时间倒序罗列（如之前笔者使用过的 Next 主题）。</p><ol><li><p>首先是在封面部分轮播展示的 banner 文章</p><ul><li>post 源文件 front-matter 中的 <code>cover</code> 一项控制该文是否加入 banner</li><li><strong>笔记、习题集等需要聚合组织在一起、并且长期更新的内容就非常适合放在 banner 部分</strong></li></ul></li><li><p>首页的“推荐文章”展示</p><ul><li><p>主题配置文件 <code>_config.yml</code> 中有该项功能的全局开关设置</p><pre class=" language-yml"><code class="language-yml">recommend:showTitle: true</code></pre></li><li><p>post 源文件 front-matter 中的 <code>top</code> 一项控制该文是否加入 banner</p></li><li><p><strong>某些内容相对独立、零散，但是 “颇值得一看” 的文章可以放到这一部分中去</strong></p></li></ul></li></ol><h4 id="开启主题的代码高亮功能"><a href="#开启主题的代码高亮功能" class="headerlink" title="开启主题的代码高亮功能"></a>开启主题的代码高亮功能</h4><p>修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 prism 插件相关的配置，主要配置如下：</p><pre class=" language-yml"><code class="language-yml">highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h4 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h4><p>修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点名、使用的主题、访问量等。</p><h4 id="修改首页的社交链接"><a href="#修改首页的社交链接" class="headerlink" title="修改首页的社交链接"></a>修改首页的社交链接</h4><p>在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱的配置。我们可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改需要的社交链接地址</p><p>笔者删除了许多链接，只保留了一部分：</p><h4 id="修改打赏的二位码"><a href="#修改打赏的二位码" class="headerlink" title="修改打赏的二位码"></a>修改打赏的二位码</h4><p>在主题文件的 <code>theme/hexo-theme-matery/source/medias/reward</code> 文件中替换即可。</p><h4 id="修改-Favicon、Logo-和-Avatar"><a href="#修改-Favicon、Logo-和-Avatar" class="headerlink" title="修改 Favicon、Logo 和 Avatar"></a>修改 Favicon、Logo 和 Avatar</h4><p>在主题文件的 <code>theme/hexo-theme-matery/source/</code> 以及 <code>theme/hexo-theme-matery/source/medias</code> 目录中替换相应文件即可。</p><h4 id="修改主题颜色（准确而言，应该是页首和页脚的颜色，banner-图的颜色是自己变化的）"><a href="#修改主题颜色（准确而言，应该是页首和页脚的颜色，banner-图的颜色是自己变化的）" class="headerlink" title="修改主题颜色（准确而言，应该是页首和页脚的颜色，banner 图的颜色是自己变化的）"></a>修改主题颜色（准确而言，应该是页首和页脚的颜色，banner 图的颜色是自己变化的）</h4><p>修改主题颜色</p><p>在主题文件的 <code>/theme/hexo-theme-matery/source/css/matery.css</code> 文件中，搜索 .bg-color 来修改背景颜色：</p><p>以下是笔者的个人喜好（灰色配彩色）：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#616161</span> <span class="token number">0%</span>, <span class="token hexcode">#BDBDBD</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="“我的梦想”-dashboard"><a href="#“我的梦想”-dashboard" class="headerlink" title="“我的梦想” dashboard"></a>“我的梦想” dashboard</h4><p>笔者直接禁用了它，无聊，还梦想呢，咋不上天……<br>（当然，后来还是开启了，不一定非得写梦想，还可以吐槽嘛）</p><pre class=" language-yml"><code class="language-yml">dream:  enable: false</code></pre><h4 id="“我的技能”-dashboard"><a href="#“我的技能”-dashboard" class="headerlink" title="“我的技能” dashboard"></a>“我的技能” dashboard</h4><p>这个版块是一个可以很好的用于展示博主掌握的理论知识、实践技能的地方，好好利用起来</p><pre class=" language-yml"><code class="language-yml"># 记录一下笔者喜欢的几种渐变配色方案：# 天蓝：background-image: linear-gradient(to right, #4facfe 0%, #00f2fe 100%);# 粉紫：background-image: linear-gradient(to right, #a18cd1 0%, #fbc2eb 100%);# 嫩绿：background-image: linear-gradient(to right, #43e97b 0%, #38f9d7 100%);# 淡黄：background-image: linear-gradient(to right, #fa709a 0%, #fee140 100%);# 晶石：background-image: linear-gradient(to right, #00c6fb 0%, #005bea 100%);# 腮红：background-image: linear-gradient(to right, #ff758c 0%, #ff7eb3 100%);mySkills:  enable: true  data:# 理论向的计算机学科或课程    Data_Structure:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 15%    Computer_Achitecture:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 5%    Operating_System:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 5%    Computer_Network:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 10%    Data_Base:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 10%    Software_Engineering:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 3%    Compiling_Theory:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 1%    Programming_Language_Theory:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 5%    Computer_Graphics:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 5%    Image_Processing:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 5%    Machine_Learing:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 5%    Information_Theory:      background: 'linear-gradient(to right, #4facfe 0%, #00f2fe 100%)'      percent: 10%# 编程语言    C:      background: 'linear-gradient(to right, #a18cd1 0%, #fbc2eb 100%)'      percent: 20%    C++:      background: 'linear-gradient(to right, #a18cd1 0%, #fbc2eb 100%)'      percent: 5%    Java:      background: 'linear-gradient(to right, #a18cd1 0%, #fbc2eb 100%)'      percent: 3%    Python:      background: 'linear-gradient(to right, #a18cd1 0%, #fbc2eb 100%)'      percent: 7%    Assembly:      background: 'linear-gradient(to right, #a18cd1 0%, #fbc2eb 100%)'      percent: 9%    Shell:      background: 'linear-gradient(to right, #a18cd1 0%, #fbc2eb 100%)'      percent: 5%# 平台或工具    Linux:      background: 'linear-gradient(to right, #fa709a 0%, #fee140 100%)'      percent: 10%    LaTeX:      background: 'linear-gradient(to right, #fa709a 0%, #fee140 100%)'      percent: 9%    Mathematica:      background: 'linear-gradient(to right, #fa709a 0%, #fee140 100%)'      percent: 10%    Matlab:      background: 'linear-gradient(to right, #fa709a 0%, #fee140 100%)'      percent: 12%    Docker:      background: 'linear-gradient(to right, #fa709a 0%, #fee140 100%)'      percent: 4%    Geogebra:      background: 'linear-gradient(to right, #fa709a 0%, #fee140 100%)'      percent: 9%    Graphviz:      background: 'linear-gradient(to right, #fa709a 0%, #fee140 100%)'      percent: 15%# 数学    Calculas:      background: 'linear-gradient(to right, #00c6fb 0%, #005bea 100%)'      percent: 25%    Linear_Algebra:      background: 'linear-gradient(to right, #00c6fb 0%, #005bea 100%)'      percent: 50%    Probability_Theory:      background: 'linear-gradient(to right, #00c6fb 0%, #005bea 100%)'      percent: 10%    Set_Theory:      background: 'linear-gradient(to right, #00c6fb 0%, #005bea 100%)'      percent: 10%    Symbolic_Logic:      background: 'linear-gradient(to right, #00c6fb 0%, #005bea 100%)'      percent: 15%    Combinatorics:      background: 'linear-gradient(to right, #00c6fb 0%, #005bea 100%)'      percent: 25%    Abstract_Algebra:      background: 'linear-gradient(to right, #00c6fb 0%, #005bea 100%)'      percent: 5%    Number_Theory:      background: 'linear-gradient(to right, #00c6fb 0%, #005bea 100%)'      percent: 7%    Complex_Analysis:      background: 'linear-gradient(to right, #00c6fb 0%, #005bea 100%)'      percent: 5%# 外语    English:       background: 'linear-gradient(to right, #ff758c 0%, #ff7eb3 100%)'      percent: 30%# 其他兴趣    Natrual_History:      background: 'linear-gradient(to right, #43e97b 0%, #38f9d7 100%)'      percent: 18%    Sports:      background: 'linear-gradient(to right, #43e97b 0%, #38f9d7 100%)'      percent: 15%</code></pre><h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><p>笔者使用的评论系统是 gitalk，该功能已经内置在主题当中，只须按照网上的教程进行配置即可：</p><ol><li><p>在 github 中申请一个 github application，<code>Authorization callback URL</code> 填写欲使用 gitalk 插件页面的域名；</p></li><li><p>生成成功之后，会生成 clientID 和 clientSecret；</p></li><li><p>在主题配置文件 <code>_config.yml</code> 中配置相应的选项</p></li></ol><pre class=" language-yml"><code class="language-yml"># the Gitalk config，default disabled# Gitalk 评论模块的配置，默认为不激活gitalk:  enable: // 是否开启该模块  owner:  // gitalk 所使用的 repo 的拥有者  repo:  // gitalk 所使用的 repo 名  oauth:  // 刚刚第 1 步中生成的 clientID 和 clientSecret；    clientId:    clientSecret:  admin:  // gitalk 所使用的 repo 的管理者（有写权限的人）</code></pre><ol start="4"><li><p>配置完成之后重新生成博客页面，进入随便一篇文章，底部会多出一个版块，第一次需要登陆 github 进行认证；</p></li><li><p>之后每一篇文章在第一次打开时（如果在开启本功能时文章就存在）或者创建之时，都会在设置的 github repo 下开启一个 issue，评论的内容就将记录在该 issue 下；</p></li></ol><h3 id="其他功能的开启和设置（推荐文章、不蒜子统计等）"><a href="#其他功能的开启和设置（推荐文章、不蒜子统计等）" class="headerlink" title="其他功能的开启和设置（推荐文章、不蒜子统计等）"></a>其他功能的开启和设置（推荐文章、不蒜子统计等）</h3><pre class=" language-yml"><code class="language-yml"># Whether to display the musics.# 是否在首页显示音乐.music:  enable: false  showTitle: true  title: 听听音乐  fixed: false # 开启吸底模式  autoplay: false # 是否自动播放  theme: '#42b983'  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: #列表最大高度# Whether to display the videos.# 是否在首页显示视频.video:  enable: false  showTitle: true  title: 精彩视频  url: # 必填  pic:  thumbnails:  height: # 如：400  autoplay: false # 是否自动播放  theme: '#42b983'  loop: false # 是否循环播放  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7# Whether to display the title of the recommended posts# 是否显示推荐文章的标题recommend:  showTitle: true# Configure website favicon and LOGO# 配置网站favicon和网站LOGOfavicon: /favicon.pnglogo: /medias/logo.png# The configuration of the second button in the home banner,# including the display name of the button, the font awesome icon, and the hyperlink to the button.# 首页 banner 中的第二个按钮的配置，包括按钮的显示名称、font awesome图标和按钮的超链接.indexbtn:  enable: true  name: Github  icon: fa-github-alt  url: https://github.com/Googolplex-C/# The configurations of the second line of home banner# icon/button will not show up if you leave the corresponding socialLink empty# 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  qq: 123123123  github:  email: xxx@xx.xx# Whether to activate the Post TOC, and Configure which title types are supported by TOC support.# You can add `toc: false` to the Front-matter of a post to turn off the TOC.# 是否激活文章 TOC 功能，并配置TOC支持选中哪些标题类型，这是全局配置。# 可以在某篇文章的 Front-matter 中再加上`toc: false`，使该篇文章关闭TOC目录功能toc:  enable: true  heading: h2, h3, h4  showToggleBtn: true # 是否显示切换TOC目录展开收缩的按钮# Whether the code is broken.# 代码是否折行code:  break: true# 是否激活文章末尾的打赏功能，默认激活（你替换为的你自己的微信、支付宝二维码图片、或者使用网络图片也可以）.reward:  enable: true  title: 你的赏识是我前进的动力  wechat: /medias/reward/wechat.png  alipay: /medias/reward/alipay.jpg# Whether to activate the copyright information of the blog and author when copying the post content.# minCharNumber: Approve copyright information by copying at least how many characters.# 是否激活复制文章时追加博客和作者的版权信息.copyright:  enable: false  minCharNumber: 50 # 至少复制多少个字符就追加版权信息.  description: 本文章著作权归作者所有，任何形式的转载都请注明出处。# Whether to activate the mathjax, this is a global configuration, but the post still does not open the mathjax rendering.# Considering that the mathjax loading is time consuming,# you also need to add `mathjax: true` to the Front-matter of the post that needs to be rendered.# 是否激活mathjax数学公式，这是全局配置，但文章仍然不会都开启mathjax渲染，# 考虑到mathjax加载比较耗时，你还需要在需要渲染的文章的Front-matter中再加上`mathjax: true`才行.mathjax:  enable: true  cdn: https://cdn.bootcss.com/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML# Post word count, reading duration, site total word count.# Before you activate, please confirm that you have installed the hexo-wordcount plugin,# install the plugin command: `npm i --save hexo-wordcount`.# 文章字数统计、阅读时长、总字数统计# 激活前请确认你已经安装了 hexo-wordcount 插件，安装命令: `npm i --save hexo-wordcount`wordCount:  enable: true  postWordCount: true  min2read: true  totalCount: true# Whether to activate the 'love' effect of clicking on the page.# 是否激活点击页面的'爱心'效果，默认激活.clicklove:  enable: false# profile in about page, including avatars, career, and personal introductions.# 在”关于”页面中配置个人信息，包括头像、职业和个人介绍.profile:  avatar: /medias/avatar.gif  career: A learner  introduction: I am.# config gallery of my photos in about page.# If you don't want to display this `Gallery` content, you can deactivate or delete this configuration.# 在“关于”页面配置"我的相册"图片，如果你不需要这些信息则可以将其设置为不激活或者将其删除.myGallery:  enable: false  data:    - /medias/featureimages/0.jpg    - /medias/featureimages/1.jpg    - /medias/featureimages/2.jpg# Whether to display post-calender in the `archive` page# 设置在归档页面中是否显示'文章日历'控件postCalendar: true# the Gitment config，default disabled# Gitment 评论模块的配置，默认为不激活gitment:  enable: false  owner:  repo:  oauth:    clientId:    clientSecret:# disqus config, default disabled# Disqus评论模块的配置，默认为不激活disqus:  enable: false  shortname:# Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: false  uid:# The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: false  appId:  appKey:  notify: false  verify: false  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'just go go' # Comment Box placeholder# Whether to display fork me on github icon and link, default true, You can change it to your repo address# 配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址.githubLink:  enable: true  url: https://github.com/Googolplex-C/  title: Fork Me# The password verification feature of read post. To use this feature,# activate the configuration item and write the 'password' key and Cipher in the post's Front-matter.# Note: In order to ensure that the original password will not be leaked to the web page,# the password of the article must be encrypted by 'SHA256' so that it will not be cracked.# 阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的Front-matter中写上'password'的键和加密后的密文即可.# 请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过'SHA256'加密的，这样就不会被破解.verifyPassword:  enable: true  promptMessage: 请输入访问本文章的密码  errorMessage: 密码错误，将返回主页！# busuanzi(http://busuanzi.ibruce.info/) website statistics# 不蒜子(http://busuanzi.ibruce.info/) 网站统计busuanziStatistics:  enable: true  totalTraffic: true # 总访问量  totalNumberOfvisitors: true # 总人次# Add google analytics configuration# 添加 Google Analytics 配置googleAnalytics:  enable: false  id:# The used front-end library can be replaced with the corresponding CDN address as needed,# If the specific version is not specified below, you can use the latest version.# 使用到的前端库，可按需替换成对应的CDN地址，如果下面未指定具体的版本号，使用最新的版本即可.libs:  css:    fontAwesome: /libs/awesome/css/font-awesome.min.css # V4.7.0    materialize: /libs/materialize/materialize.min.css # 1.0.0    aos: /libs/aos/aos.css    animate: /libs/animate/animate.min.css # V3.5.1    lightgallery: /libs/lightGallery/css/lightgallery.min.css # V1.6.11    aplayer: /libs/aplayer/APlayer.min.css    dplayer: /libs/dplayer/DPlayer.min.css    gitalk: /libs/gitalk/gitalk.css    jqcloud: /libs/jqcloud/jqcloud.css    tocbot: /libs/tocbot/tocbot.css  js:    jquery: /libs/jquery/jquery-2.2.0.min.js    materialize: /libs/materialize/materialize.min.js # 1.0.0    masonry: /libs/masonry/masonry.pkgd.min.js # v4.0.0    aos: /libs/aos/aos.js    scrollProgress: /libs/scrollprogress/scrollProgress.min.js    lightgallery: /libs/lightGallery/js/lightgallery-all.min.js # V1.6.11    clicklove: /libs/others/clicklove.js    busuanzi: /libs/others/busuanzi.pure.mini.js    aplayer: /libs/aplayer/APlayer.min.js    dplayer: /libs/dplayer/DPlayer.min.js    crypto: /libs/cryptojs/crypto-js.min.js    echarts: /libs/echarts/echarts.min.js    gitalk: /libs/gitalk/gitalk.min.js    jqcloud: /libs/jqcloud/jqcloud-1.0.4.min.js    tocbot: /libs/tocbot/tocbot.min.js# The post featured images that needs to be displayed when there is no image.# 无文章特色图片时需要显示的文章特色图片.featureImages: - /medias/featureimages/0.jpg- /medias/featureimages/1.jpg- /medias/featureimages/2.jpg- /medias/featureimages/3.jpg- /medias/featureimages/4.jpg- /medias/featureimages/5.jpg- /medias/featureimages/6.jpg- /medias/featureimages/7.jpg- /medias/featureimages/8.jpg- /medias/featureimages/9.jpg- /medias/featureimages/10.jpg- /medias/featureimages/11.jpg- /medias/featureimages/12.jpg- /medias/featureimages/13.jpg- /medias/featureimages/14.jpg- /medias/featureimages/15.jpg- /medias/featureimages/16.jpg- /medias/featureimages/17.jpg- /medias/featureimages/18.jpg- /medias/featureimages/19.jpg- /medias/featureimages/20.jpg- /medias/featureimages/21.jpg- /medias/featureimages/22.jpg- /medias/featureimages/23.jpg  # default configs that the default policy for every articles/posts  # default 配置文章的默认转载规则  # you can define reprint policy for a single article in the front-matter of the specific md file using this key: reprintPolicy  # 您可以使用在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则  # 可用的转载规则有（available reprint policies are）：  # 这些转载规则的意义请参考(you can refer to this link FMI)：https://creativecommons.org/choose/?lang=zh  # cc_by（知识共享署名 4.0 国际许可协议 Creative Commons Attribution-NoDerivatives 4.0 International License）  # cc_by_nd（知识共享署名-禁止演绎 4.0 国际许可协议 Creative Commons Attribution-NoDerivatives 4.0 International License）  # cc_by_sa（知识共享署名-相同方式共享 4.0 国际许可协议 Creative Commons Attribution-ShareAlike 4.0 International License）  # cc_by_nc（知识共享署名-非商业性使用 4.0 国际许可协议 Creative Commons Attribution-NoDerivatives 4.0 International License）  # cc_by_nc_nd（知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License）  # cc_by_nc_sa（知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License）  # cc0（CC0 1.0 通用 (CC0 1.0) 公共领域贡献 CC0 1.0 Universal (CC0 1.0) Public Domain Dedication） https://creativecommons.org/publicdomain/zero/1.0/deed.zh  # noreprint（不允许转载 not allowed to reprint）  # pay（付费转载 pay for reprinting）reprint:  enable: true # whether enable reprint section 是否启用“转载规则限定模块”  default: noreprint</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客搭建与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github Pages </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode Snippet Configuration</title>
      <link href="/posts/VSCode-Snippet-Configuration.html"/>
      <url>/posts/VSCode-Snippet-Configuration.html</url>
      
        <content type="html"><![CDATA[<p>日常折腾，为了更流畅地在电脑上写数学公式和博文。</p><a id="more"></a><h3 id="一、为什么要折腾"><a href="#一、为什么要折腾" class="headerlink" title="一、为什么要折腾"></a>一、为什么要折腾</h3><p>尽管之前已经在笔者本人的 Ubuntu 系统上进行了键位映射，但是写博文的时候依然非常不顺手，输入速度很慢，尤其是带有 LaTeX 公式的时候，此外写一般的代码时候也没有训练打字时顺畅。</p><h3 id="二、从哪里得到的启发"><a href="#二、从哪里得到的启发" class="headerlink" title="二、从哪里得到的启发"></a>二、从哪里得到的启发</h3><p>在知乎的一篇帖子 <a href="https://zhuanlan.zhihu.com/p/60049290" target="_blank" rel="noopener">1700页数学笔记火了！全程敲代码，速度飞快易搜索，硬核小哥教你上手LaTeX+Vim</a> 中，介绍了一位小哥使用 LaTeX + Vim，在课堂上记下了 1700 多页数学笔记，其中提到了一个编辑器的特性叫做 Snippet，可以通过输入关键词直接插入设定好的代码片段，尽管笔者没有使用过、也不会用 Vim，但是这个 Snippet 特性还是令笔者非常感兴趣，当时笔者就是从此处受到了启发。</p><h3 id="三、为什么会慢"><a href="#三、为什么会慢" class="headerlink" title="三、为什么会慢"></a>三、为什么会慢</h3><ol><li>代码中含有大量的符号</li><li>笔者暂时还没有开始练习非英文键区的标准指法；</li><li>即便训练了非英文键区的标准指法，数字区和符号区的键位也离手指更远，因此相比起字母键区的键位，输入节奏必然有别，输入速度必然也更慢</li></ol><h3 id="四、理想的快捷输入"><a href="#四、理想的快捷输入" class="headerlink" title="四、理想的快捷输入"></a>四、理想的快捷输入</h3><ol><li>Snippet 中已经包含代码中繁杂的符号，不需要再手动输入</li><li>作为输入者，只需（或者最大程度地只需）输入真正的会显示出来的内容（主要就是字母串）</li><li>在使用快捷输入的时候，功能键必须尽可能地靠近字母区；</li><li>快捷输入最好可以嵌套使用</li></ol><h3 id="五、Snippet-和-Shortcut-设置"><a href="#五、Snippet-和-Shortcut-设置" class="headerlink" title="五、Snippet 和 Shortcut 设置"></a>五、Snippet 和 Shortcut 设置</h3><p>VSCode 已经自带了 Snippet 功能，尽管功能不如 Vim 上的插件，并且有一定的缺陷，但基本还是满足使用要求的，笔者在 CSDN 上找到一篇博文，其内容是 VSCode 文档中 Snippet 部分的翻译和整理。笔者就不在此赘述 VSC 中 Snippet 的基本语法和概述了。</p><p><a href="https://blog.csdn.net/maokelong95/article/details/54379046" target="_blank" rel="noopener">[VS Code]跟我一起在Visual Studio Code 添加自定义snippet（代码段），附详细配置</a></p><h4 id="更改触发快捷键"><a href="#更改触发快捷键" class="headerlink" title="更改触发快捷键"></a>更改触发快捷键</h4><p>snippet 的本质是输入一个作为口令的单词（vscode里称为 prefix）之后，通过设定好的快捷键触发功能，然后将prefix替换为预设好的内容</p><ol><li><p>设置 <code>&quot;editor.tabCompletion&quot;: &quot;on&quot;</code>，这一步严格来说开启的是自动补全，和真正意义上的插入 snippet 是不一样的</p></li><li><p>设置</p><pre><code> {     &quot;key&quot;: &quot;shift+space&quot;,     &quot;command&quot;: &quot;editor.action.insertSnippet&quot; }</code></pre><p>这个应该才是真正意义上地触发 snippet 的命令；</p></li></ol><p>其他快捷键保持不变；</p><h4 id="自定义-prefix"><a href="#自定义-prefix" class="headerlink" title="自定义 prefix"></a>自定义 prefix</h4><p>由于笔者最近一段时间几乎只用 VSCode 写博客，因此优先考虑 LaTeX 和 Markdown 的输入。</p><p>同时，考虑到 LaTeX 公式也会在 Markdown 中出现，因此笔者将 LaTeX 命令的 Snippet 放到全局 Snippet 文件中，但是将 scope 关键字设为：LaTeX，Markdown</p><p>具体的设置如下：</p><pre class=" language-JSON"><code class="language-JSON">{    // latex 数学环境输入基本要素：定界符    "Inline maths formula delimiter": {        "scope": "markdown,latex",        "prefix": "fi",        "body": "$$1$ $0",        "description": "the delimiter of inline maths"    },    "Display maths formula delimiter": {        "scope": "markdown,latex",        "prefix": "fd",        "body": ["$$",            "$1",            "$$\n",            "$0",        ],        "description": "the delimiter of diaplay maths"    },    // latex 公式环境以及编号、引用等宏    "formulas environment": {        "scope": "markdown,latex",        "prefix": "fev",        "body": [            "\\begin{${1|equation,equation*,align,align*,gather,gather*,flalign,flalign*|}}",            "$2",            "\\end{${1|equation,equation*,align,align*,gather,gather*,flalign,flalign*|}}$0",        ],        "description": "the formulas environment"    },    "reference and tags of formulas": {        "scope": "markdown,latex",        "prefix": "ftr",        "body": ["${1|\\ref,\\tag,\\tag*,\\label|}{$2}$0"],        "description": "reference and tags of formulas"    },    // latex 内嵌公式环境    "formulas inside environment": {        "scope": "markdown,latex",        "prefix": "fiev",        "body": [            "\\begin{${1|gathered,split,aligned|}}",            "$2",            "\\end{${1|gathered,split,aligned|}}$0",        ],        "description": "the formulas inside environment"    },    // latex 矩阵环境    "environment of matrix": {        "scope": "markdown,latex",        "prefix": "fmt",        "body": [            "\\begin{${1|matrix,pmatrix,bmatrix,vmatrix,Vmatrix,Bmatrix|}}",            "$2",            "\\end{${1|matrix,pmatrix,bmatrix,vmatrix,Vmatrix,Bmatrix|}}$0",        ],        "description": "environment of matrix"    },    // latex 基本宏命令快捷输入    "Slash1": {        "scope": "markdown,latex",        "prefix": "jj",        "body": "\\\\$1{$2}$0",        "description": "Slash1",    },    "Slash2": {        "scope": "markdown,latex",        "prefix": "jk",        "body": "\\\\$1{$2}{$3}$0",        "description": "Slash2",    },    "Slash3": {        "scope": "markdown,latex",        "prefix": "jl",        "body": "\\\\$1{$2}{$3}{$4}$0",        "description": "Slash3",    },    // latex 公式基本结构：上下标    "superscript and subscript": {        "scope": "markdown,latex",        "prefix": "gg",        "body": "$1_{$2}^{$3}$0",        "description": "superscript and subscript"    },    // latex 括号快捷输入    "parenthesis": {        "scope": "markdown,latex",        "prefix": "ff",        "body": "($1)$0",        "description": "parenthesis"    },    "brace": {        "scope": "markdown,latex",        "prefix": "dd",        "body": "\\{$1\\\\}$0",        "description": "brace"    },    "bracket": {        "scope": "markdown,latex",        "prefix": "ss",        "body": "[$1]$0",        "description": "bracket"    },    // latex 常用函数,公式或表达式    "sqrt formulas": {        "scope": "markdown,latex",        "prefix": "fsq",        "body": "\\sqrt[$1]{$2}$0",        "description": "sqrt formulas"    },    "general fraction": {        "scope": "markdown,latex",        "prefix": "fgfr",        "body": "\\genfrac{$1}{$2}{$3}{$4}{$5}{$6}$0",        "description": "general fraction"    },    "fraction": {        "scope": "markdown,latex",        "prefix": "ffr",        "body": "\\frac{$1}{$2}$0",        "description": "fraction"    },    "binomial coefficient": {        "scope": "markdown,latex",        "prefix": "fbi",        "body": "\\binom{$1}{$2}$0",        "description": "binomial coefficient"    },    "lists": {        "scope": "markdown,latex",        "prefix": "flt",        "body": "$$1$, $$2$, $$3$, $\\ldots$, $$4$$0",        "description": "binomial coefficient"    },}</code></pre><p>以及专门面向 Markdown 的 prefix：</p><pre class=" language-JSON"><code class="language-JSON">{    // 数学证明结束语    "End of proof": {        "prefix": "qed",        "body": [            "<p align=\"right\">Q.E.D.</p>",            "$0"        ],        "description": "End of proof",    },    // 插入图片（针对Hexo）    "Insert image": {        "prefix": "iimg",        "body": [            "{% asset_image $1.$2 %}",            "$0"        ],        "description": "Insert image",    },    // 注释    "Comments": {        "prefix": "cmt",        "body": [            "<!--...-->",            "$0",        ],        "description": "Comments",    },    // html 标签字体颜色    "Fonts style": {        "prefix": "sty",        "body": [            "<font color=\"$1\" size=\"$2\"> $3 </font>$0",        ],        "description": "Comments",    },    // 居中    "Center": {        "prefix": "ctr",        "body": [            "<center> $1 </center>$0",        ],        "description": "Center",    },}</code></pre><p><strong>需要注意的是：如果需要定义一个 <code>\[content]</code> 的内容，即<code>\\</code> 后面接的是符号 <code>$</code>，那么在JSON 中不能写成 <code>\\$1</code>，笔者专门在网上搜查过，JSON 会经过两次转义（其实笔者自己也不太清楚内部的原理），因此，必须写成 <code>\\\\$1</code> 的形式。</strong></p><h4 id="定义方向键快捷键"><a href="#定义方向键快捷键" class="headerlink" title="定义方向键快捷键"></a>定义方向键快捷键</h4><p>方向键也是非常常用的键位，但是它们离主键区实在太远了，笔者将 <code>ctrl+;</code> 设为 Rightarrow 和 Downarrow，<code>ctrl+‘</code>设为 Leftarrow 和 Uparrow；其中当编辑器处于文本聚焦（也就是光标在闪可以输入文字的状态）时，它们相当于左右箭头，其他情形下相当于上下箭头。</p><pre class=" language-JSON"><code class="language-JSON">[    {        "key": "ctrl+'",        "command": "cursorLeft",        "when": "textInputFocus"    },    {        "key": "ctrl+'",        "command": "history.showPrevious",        "when": "historyNavigationEnabled && historyNavigationWidget"    },    {        "key": "ctrl+'",        "command": "list.focusUp",        "when": "listFocus && !inputFocus"    },    {        "key": "ctrl+'",        "command": "notifications.focusPreviousToast",        "when": "notificationFocus && notificationToastsVisible"    },    {        "key": "ctrl+'",        "command": "outline.focusUpHighlighted",        "when": "outlineFiltered && outlineFocused"    },    {        "key": "ctrl+'",        "command": "selectPrevSuggestion",        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"    },    {        "key": "ctrl+'",        "command": "showPrevParameterHint",        "when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"    },    {        "key": "ctrl+'",        "command": "workbench.action.interactivePlayground.arrowUp",        "when": "interactivePlaygroundFocus && !editorTextFocus"    },    {        "key": "ctrl+;",        "command": "breadcrumbs.selectFocused",        "when": "breadcrumbsActive && breadcrumbsVisible"    },    {        "key": "ctrl+;",        "command": "cursorRight",        "when": "textInputFocus"    },    {        "key": "ctrl+;",        "command": "history.showNext",        "when": "historyNavigationEnabled && historyNavigationWidget"    },    {        "key": "ctrl+;",        "command": "keybindings.editor.focusKeybindings",        "when": "inKeybindings && inKeybindingsSearch"    },    {        "key": "ctrl+;",        "command": "list.focusDown",        "when": "listFocus && !inputFocus"    },    {        "key": "ctrl+;",        "command": "notifications.focusNextToast",        "when": "notificationFocus && notificationToastsVisible"    },    {        "key": "ctrl+;",        "command": "outline.focusDownHighlighted",        "when": "outlineFiltered && outlineFocused"    },    {        "key": "ctrl+;",        "command": "selectNextSuggestion",        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"    },    {        "key": "ctrl+;",        "command": "settings.action.focusSettingsFile",        "when": "inSettingsSearch && !suggestWidgetVisible"    },    {        "key": "ctrl+;",        "command": "settings.action.focusSettingsFromSearch",        "when": "inSettingsSearch && !suggestWidgetVisible"    },    {        "key": "ctrl+;",        "command": "showNextParameterHint",        "when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"    },    {        "key": "ctrl+;",        "command": "workbench.action.interactivePlayground.arrowDown",        "when": "interactivePlaygroundFocus && !editorTextFocus"    },]</code></pre><p>至此，设置就全部结束了</p><h3 id="六、曾经遇到的坑，以及不完善的地方"><a href="#六、曾经遇到的坑，以及不完善的地方" class="headerlink" title="六、曾经遇到的坑，以及不完善的地方"></a>六、曾经遇到的坑，以及不完善的地方</h3><ol><li><p>如何在一个 snippet 中快捷地输入一个嵌套的 snippet：</p><p> 笔者做过非常多的尝试，最后仍然没有达到想要的效果</p><p> 在笔者的 VSCode 上，单纯地把 <code>tabCompletion</code> 设为 <code>on</code>的话，快捷键是这样的：</p><ul><li><p>输入 prefix，按 <code>tab</code>，自动插入 snippet</p></li><li><p>按 <code>tab</code> 可以不断地跳转到 snippet 中设定好的 tabstop 位置，直到结束</p><p>于是，如果设定好了一个至少一个 topstop 的 snippet的话，在 tabstop 当中如果想要继续通过 <code>tab</code> 来插入嵌套的 snippet 是做不到的</p><p>笔者为了解决这个问题是费了许多功夫：</p></li></ul><ol><li><p>一开始笔者以为控制 <code>tab</code> 输入 snippet 的是命令 <code>insertSnippet</code>，于是笔者将触发条件中的 <code>!inSnippetMode</code> 去掉，无果；</p></li><li><p>后来笔者发现即使是在 snippet 的 tabstop 中，可以通过 <code>ctrl+tab</code> 快捷键触发 suggestion，然后用 <code>tab</code> 选择，但这样就多了一部操作，显得很繁琐</p></li><li><p>于是笔者将 这个快捷键的触发条件 复制到 insertSnippet 中，依然无效</p></li><li><p>仍不死心，后来发现控制这一行为的应该是 <code>insertBestCompletion</code> 这一命令；尝试修改之，无果；</p></li><li><p>在 VSC 的 github issue 上也找到了一些嵌套 snippet not working 的帖子，有人说要修改 <code>editor.suggestion.snippetPreventQuickSuggestion</code> 这一项，但好像没有什么变化；</p></li><li><p>笔者还发现 <code>insertSnippet</code> 这一命令好像是不起作用的，设置什么快捷键都不会触发其效果</p><p>中途笔者使用了一段时间的 <code>shift+space</code> 触发建议小窗口后（原快捷家是 <code>ctrl+space</code>） 使用 <code>tab</code> 选中的方式，但是这方法除了比较麻烦之外，还必须要求 prefix 是单独的单词，不能和前后的内容连在一起，否则不会触发；</p><p>最后笔者将 命令<code>editor.action.insertSnippet</code>（这个才能真正其作用，但依然是弹出一个窗口）的快捷键设为 <code>shift+space</code>，输入 prefix 后 <code>enter</code>选中，；而建议小窗口的快捷键换回 <code>ctrl+space</code>，虽然也要两步，但是可以在任何时候插入 snippet。</p></li></ol></li><li><p>退出snippet mode 的问题</p><p> 在 snippet 的 tabstop 中，为了显示现在处于 tabstop 中，输入的时候是带有阴影的；</p><p> 笔者不希望进入这个snippet mode 之后太难或者太容易就推出这种状态：前者有时候会增添麻烦，后者会使得在 tabstop 处使用一些功能键的时候（比如 <code>ctrl+v</code>）直接推出，影响节奏；</p><p> 最后发现，有几种情况会退出 snippet mode：</p><ol><li><code>Esc</code> 或者 <code>Shift+Esc</code></li><li><code>Tab</code> 进入下一个 tabstop</li><li>光标移出 tabstop 的位置</li></ol></li></ol><h4 id="不完善的地方"><a href="#不完善的地方" class="headerlink" title="不完善的地方"></a>不完善的地方</h4><ol><li>prefix 本身必须是固定的，不能支持正则表达式等</li><li>snippet 嵌套问题</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandoc报错的解决</title>
      <link href="/posts/Fixing%20the%20error%20of%20Pandoc.html"/>
      <url>/posts/Fixing%20the%20error%20of%20Pandoc.html</url>
      
        <content type="html"><![CDATA[<p>记录一下笔者的电脑上安装的 Pandoc 报错的问题，以及对应的解决方案。</p><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ol start="0"><li><p>笔者动手能力很差，而且刚接触 Ubuntu 系统不久，对其并不熟悉；</p></li><li><p>笔者搭建博客的其中一个重要目的就是记录笔记，而笔者本身又是理工专业的，所以博文中必然包含大量的数学公式，这些数学公式的输入与排版几乎只能依赖于 LaTeX / MathJax</p></li><li><p>基于 Hexo 框架以及 Next 主题自身的某些原因，MathJax虽然已经内置在 Next 主题中，但是据网上的反映，Hexo 的渲染引擎在渲染某些 LaTeX 代码的时候，会错误地解析成别的东西，最后呈现出来的方式是一团乱麻；</p></li><li><p>所以，笔者在搭建博客的时候，花了许多的心思寻找解决方案：</p><ol><li>有些网友的方法是修改 Hexo 框架的某些解析规则；笔者不喜欢这种需要修改框架自身的方法；</li><li>有些网友提出更换 Hexo 原有的渲染引擎，但更换之后仍会有这些问题出现，从而仍然需要修改 Hexo 框架的规则；</li><li>还有一种方法就是使用 Pandoc 渲染，据网上的资料，这种方法需要在本地安装 Pandoc，可能稍显臃肿；但无需修改任何规则，直接可用，另外 Pandoc 解析的 Markdown 的语法格式和 标准你 Markdown 有一定的不一样（<strong>比如 LaTeX 的 $ … $ 两边必须紧贴公式，不能留空</strong>）</li></ol></li><li><p>使用 Pandoc 渲染的安装步骤比较简单（此处顺便作为搭建记录）</p><ol><li>本地安装最新版本的 Pandoc；</li><li>Hexo 博客根目录下终端安装 <code>hexo-renderer-pandoc</code>；</li><li>卸载原有的渲染引擎；</li><li>在 Next 主题配置文件 <code>_config.yml</code> 中 将 <code>enable:MathJax</code> 项设为 <code>true</code></li></ol></li><li><p>笔者<strong>猜测</strong>的针对数学公式渲染的流程：</p><pre class=" language-mermaid"><code class="language-mermaid">graph LR 源文件 --> renderer; Pandoc --> renderer; renderer --> MathJax; MathJax --> 网页最终效果</code></pre></li></ol><p>渲染引擎应该需要调用本地的 Pandoc 程序；<br>而 MathJax 本身应该是独立的，因为官方的原版渲染引擎也能显示一部分公式，但它要求前面的解析工作不能出问题；</p><ol start="6"><li>在配置完成之后，博客框架可以正常运行</li></ol><h1 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h1><p>3 月 13 日，笔者发觉已经有一段时间没有写博文了，于是就随意写了一些，在终端下生成博客的时候，竟然破天荒的报错了：</p><pre><code>pandoc exited with code 2: --smart/-S has been removed.  Use +smart or -smart extension instead.</code></pre><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><h2 id="反思和复盘："><a href="#反思和复盘：" class="headerlink" title="反思和复盘："></a>反思和复盘：</h2><ol><li>笔者最近并没有折腾过电脑上的 Hexo 框架，问题是平白无故地出现的；</li><li>之前在笔者的 Windows 10 系统上，也曾出现过这样的问题，并且最后死活都解决不了，后来重装了 Ubuntu 后不了了之；</li><li>这次问题的出现的原因应该和之前是类似的；</li><li>上一次正常写博文大约是在十天前，这十天内可能导致错误的出现的可能原因有：<ol><li>笔者更换了 Markdown 文件的编辑器，新的编辑器在本地直接使用 pandoc 渲染；</li><li>还安装了一些打包好的 AppImage 程序；</li></ol></li></ol><h2 id="解决过程-1"><a href="#解决过程-1" class="headerlink" title="解决过程"></a>解决过程</h2><ol><li><p>根据报错信息在 Google 上搜索，大意就是 Pandoc 的版本低于 2.0 就会出现这种错误；</p></li><li><p>github 上有网友表示在重装了 hexo-renderer-pandoc 之后就成功解决了问题；</p></li><li><p>当时笔者终于回想起在 Win 10 上遇到的问题应该是同一个问题；</p></li><li><p>但首先为了排除是 Markdown 源文件的问题，笔者现将最近的两篇博文的 Markdown 源文件移到别的目录下</p><p> 重新生成： <code>hexo -g</code>，依然报错；</p><p> 此时可基本排除 Markdown 源文件的问题；</p></li><li><p>笔者直接在终端下输入命令 <code>pandoc -v</code>，显示版本号是 1.9</p><p> 问题逐渐浮出水面，当时笔者安装 pandoc 的具体版本是多少虽然不记得了，但绝对不可能去安装一个这么低的版本；</p></li><li><p>终端输入 <code>dpkg -l | grep &quot;pandoc&quot;</code>，显示 pandoc 版本是 2.5</p><p> 看来应该是不小心在电脑上安装了两个 pandoc，引起了混乱；</p></li><li><p>笔者怀疑是新的编辑器 VSCode 以及插件 Markdown-Preview-Enhanced 引入了新的渲染引擎，可是在设置中并没有证据显示这一点；</p></li><li><p>求助于搜索引擎，换了许多关键字，无果；最终把搜索关键字换为英文在 Google 上搜到了一个网页：</p><p> <a href="https://askubuntu.com/questions/1084723/issues-installing-pandoc-2-3-1-in-ubuntu-18-04-1" target="_blank" rel="noopener">Issues installing pandoc 2.3.1 in Ubuntu 18.04.1</a></p><p> 里面的评论提醒了笔者，这种情况下很可能是因为另外一个 pandoc 是通过 non-deb 的方式安装的，所以需要将这个 “私生子” 给找出来</p></li><li><p>此外，笔者还了解到了两个有用的命令：<code>whereis</code> 和 <code>which</code>，最终通过这两个命令找到了多出来的 pandoc，其实是在 anaconda 的 base 环境下的可执行文件；</p></li></ol><ol start="10"><li><p>真相终于大白！接下来就是解决这个问题的步骤了：</p><ol><li>笔者首先试图升级 anaconda 环境下的 pandoc 包，但好像没办法升级；</li><li>最后，笔者把 anaconda 在 PATH 环境变量中的顺序改到最后：这样系统按照从前到后的搜索顺序就会先搜索到系统安装的 pandoc了</li></ol></li><li><p>最终问题解决，博客可以正常生成了！解决了之前悬而未决的问题，颇有收获。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 系统维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandoc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wine安装与折腾</title>
      <link href="/posts/Wine-Installation.html"/>
      <url>/posts/Wine-Installation.html</url>
      
        <content type="html"><![CDATA[<p>记录下安装折腾 wine 的全过程，安装过程中遇到了问题，作为备忘；</p><p>参考网址为：<a href="https://wiki.winehq.org/Ubuntu_zhcn" target="_blank" rel="noopener">Ubuntu 系统上 Wine 安装</a></p><a id="more"></a><p>接下来的步骤是按照上面官网链接的指示来做的：</p><h4 id="1-开启-32bit-架构支持"><a href="#1-开启-32bit-架构支持" class="headerlink" title="1. 开启 32bit 架构支持"></a>1. 开启 32bit 架构支持</h4><pre><code>sudo dpkg --add-architecture i386 </code></pre><h4 id="2-下载添加仓库密钥"><a href="#2-下载添加仓库密钥" class="headerlink" title="2. 下载添加仓库密钥"></a>2. 下载添加仓库密钥</h4><pre><code>wget -nc https://dl.winehq.org/wine-builds/winehq.keysudo apt-key add winehq.key</code></pre><h4 id="3-添加仓库"><a href="#3-添加仓库" class="headerlink" title="3. 添加仓库"></a>3. 添加仓库</h4><pre><code>sudo apt-add-repository &#39;deb https://dl.winehq.org/wine-builds/ubuntu/bionic main&#39;</code></pre><h4 id="4-更新安装包"><a href="#4-更新安装包" class="headerlink" title="4. 更新安装包"></a>4. 更新安装包</h4><pre><code>sudo apt update</code></pre><p>这前四步都非常顺利，没有遇到任何问题，如下图所示：</p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/001.png" alt="001"></p>{% asset_image 001.png %}<p>截止目前，一切都很顺列，但是接下来的一步就开始出问题了；</p><h4 id="5-安装稳定版安装包"><a href="#5-安装稳定版安装包" class="headerlink" title="5. 安装稳定版安装包"></a>5. 安装稳定版安装包</h4><pre><code>sudo apt install --install-recommends winehq-stable</code></pre><p>弹出来的结果是</p><img src="/posts/Wine-Installation/002.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/002.png" alt="002"></p><p>有一些未满足的依赖关系！</p><p>好，我们来看看官网上怎么说？</p><blockquote><p>如果 apt-get 提示缺少依赖，请先安装缺少的依赖，然后重复以上两步（update 和 install）</p></blockquote><h4 id="6-在黑暗中摸索"><a href="#6-在黑暗中摸索" class="headerlink" title="6. 在黑暗中摸索"></a>6. 在黑暗中摸索</h4><p>首先尝试安装 libswresample2，反馈如下</p><img src="/posts/Wine-Installation/003.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/003.png" alt="003"></p><p>这个意思应该是已经安装了这个包；</p><p>好，继续安装 libsoxr0，反馈如下</p><img src="/posts/Wine-Installation/004.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/004.png" alt="004"></p><p>也已经安装了这个包</p><p>继续，尝试安装 wine-stable，反馈如下：</p><img src="/posts/Wine-Installation/005.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/005.png" alt="005"></p><p>我去，翻天了！</p><p>忍着一口气继续尝试安装 wine-stable-amd64</p><img src="/posts/Wine-Installation/006.png"><img src="/posts/Wine-Installation/007.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/006.png" alt="006"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/007.png" alt="007"></p><p>OK，成功安装了！再尝试一下使用 <code>sudo apt install wine-stable</code>命令安装</p><img src="/posts/Wine-Installation/008.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/008.png" alt="008"></p><p>依赖项果然少了，amd64 后缀包成功安装了</p><p>于是我们继续尝试安装 <code>wine-stable-i386</code></p><img src="/posts/Wine-Installation/009.png"><img src="/posts/Wine-Installation/010.png"><img src="/posts/Wine-Installation/011.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/009.png" alt="009"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/010.png" alt="010"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/011.png" alt="011"></p><p>老子现在彻底无语了……</p><p>于是上 google 查，查到了不少与我遇到相似问题的人，可是这些网页里的解决方案我基本都看不懂，一头雾水。</p><h4 id="7-问题解决"><a href="#7-问题解决" class="headerlink" title="7. 问题解决"></a>7. 问题解决</h4><p>活马当死马医，用关键词 “无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系” 在 google 上搜索，结果搜到的帖子给出的解决方法竟然如出一辙：是源的问题。</p><p>其中一个搜索结果：<a href="https://www.cnblogs.com/LeoGodfrey/p/3316834.html" target="_blank" rel="noopener">E:无法修正错误,因为您要求某些软件包保持现状,就是它们破坏了软件包间的依赖关系</a></p><p>然后按照帖子的说法，把 软件与更新 中 “更新” 选项卡的 “从下列地点安装更新” 的两个勾选上；</p><img src="/posts/Wine-Installation/012.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/012.png" alt="012"></p><p>回到终端里面，使用一开始的安装命令进行安装，发现可以安装啦！！！！</p><img src="/posts/Wine-Installation/013.png"><img src="/posts/Wine-Installation/014.png"><img src="/posts/Wine-Installation/015.png"><img src="/posts/Wine-Installation/016.png"><img src="/posts/Wine-Installation/017.png"><img src="/posts/Wine-Installation/018.png"><img src="/posts/Wine-Installation/019.png"><img src="/posts/Wine-Installation/020.png"><img src="/posts/Wine-Installation/021.png"><img src="/posts/Wine-Installation/022.png"><img src="/posts/Wine-Installation/023.png"><img src="/posts/Wine-Installation/024.png"><img src="/posts/Wine-Installation/025.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/013.png" alt="013"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/014.png" alt="014"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/015.png" alt="015"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/016.png" alt="016"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/017.png" alt="017"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/018.png" alt="018"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/019.png" alt="019"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/020.png" alt="020"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/021.png" alt="021"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/022.png" alt="022"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/023.png" alt="023"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/024.png" alt="024"></p><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/025.png" alt="025"></p><p>中途省略了一部分，没有截图……</p><p>然后笔者输入命令 <code>wine -v</code>本意欲查看版本号，结果又自动开始安装 wine-gecko：</p><img src="/posts/Wine-Installation/026.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/026.png" alt="026"></p><p>最后输入命令 <code>wine --version</code>成功取得版本号：</p><img src="/posts/Wine-Installation/027.png"><p><img src="/home/jackson/Blog/source/_posts/Wine%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%98%E8%85%BE/027.png" alt="027"></p><p>目前看来，wine 终于安装成功了，告一段落，心累……</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oxford English Dictionary Installation</title>
      <link href="/posts/OED-installation.html"/>
      <url>/posts/OED-installation.html</url>
      
        <content type="html"><![CDATA[<p>安装 Oxford English Dictionary，过程不难，记录如下</p><a id="more"></a><h5 id="安装包来源"><a href="#安装包来源" class="headerlink" title="安装包来源"></a>安装包来源</h5><p>magnet:?xt=urn:btih:98F95B2DA4380A0231109F8CFDB6E5AB0E48C2EA</p><p>挺老的资源，但是健康度还是挺好的，在 Ubuntu 上使用 qBIttorrent 下载一晚上就安装好了；</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>下载得到是一个压缩包，里面是需运行在 Windows 系统上目录（主程序是exe），无需安装；</p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>打开主程序，提示找不到 MSVCR71.dll</p><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><ol><li><p>在网上下载 32bit 的 MSVCR71.dll，放置在 C:/windows/sysWOW64 目录下，无需通过名命令行注册；</p></li><li><p>根据原网页的提示，将目录名字改为 “Oxford English Dictionary”；</p></li></ol><p>问题成功解决，可以正常运行主程序。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathematica 11 安装过程</title>
      <link href="/posts/Mathematica-installation.html"/>
      <url>/posts/Mathematica-installation.html</url>
      
        <content type="html"><![CDATA[<p>本文记录实验室电脑安装 Mathematica 11 并 “破解” 授权的过程. </p><a id="more"></a><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><p>Windows 10</p><p>公用电脑，软件安装及文件存放比较乱，但基本没有什么问题</p><h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><p>Mathematica 11 （下简称MMA）安装包（内含序列号生成器），是在百度上搜索得到的结果，经某软件下载站链接定向至百度网盘分享页，并已转存至笔者百度网盘中.</p><h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><ol><li>安装包是分割打包的，对其完整解压</li><li>点击 Setup.exe，一路 next 即可（斜眼）</li><li>进入命令行（我指的是 windows 下的命令提示符），将目录转至序列号生成器的目录下；<br><strong>注：安装包自带的<code>readme.txt</code> 表示，要将生成器复制到 <code>C:\</code> 下；我猜想可能是为了避免目录中带有空格或者中文字体，因此笔者在运行生成器的时候，特别留意了这一点，由于解压目录刚好没有这样的问题，所以，就直接在解压目录下运行</strong></li><li>打开 MMA 主程序，提示输入序列号激活，根据指示，不要选择在线激活，而选择 “手动激活”；<br><strong>注：理论上，有些软件在这一步应该需要断开网络，但笔者没有断开网络，仍然成功</strong></li><li>窗口此时应该会显示 MathID ，将其复制到命令行下，作为生成器的输入参数，回车，出现序列号和密码；将生成的这两列字符串复制回 MMA 的激活窗口，点击<code>next</code>，成功！<br><strong>注：在序列号生成器中输入 MathID 时，一定要把中间的<code>-</code> hyphen 分隔符也包含在内，否则生成出来的序列号和密码是无法成功激活的！笔者第一次就不小心踩到了坑，心塞……</strong></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>一台性能很强的计算机上少了专业计算软件总觉得少了些什么，装完之后顿感轻松愉快～～</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu输入法Bug及解决过程</title>
      <link href="/posts/Fixing-the-input-method-on-Ubuntu.html"/>
      <url>/posts/Fixing-the-input-method-on-Ubuntu.html</url>
      
        <content type="html"><![CDATA[<p>最近笔者的笔记本电脑上的Ubuntu系统的输入法出现问题，最终（可能不是永久性的）解决 Bug，将过程记录如下。</p><a id="more"></a><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>系统：Ubuntu 18.04 LTS</p><p>输入法：系统自带的 iBus 输入法</p><h4 id="Bug-描述"><a href="#Bug-描述" class="headerlink" title="Bug 描述"></a>Bug 描述</h4><p>Bug 是突然出现的，描述如下：</p><ol><li>一开始可以切换中英文，到后来中英文无法用键盘快捷键切换，再后来甚至无法用鼠标切换，顶栏一直显示 “中” ；</li><li>Bug 最主要的问题和特征就是，中文输入不再可用，英文输入正常；</li><li>开始的时候，重启可以解决问题，但是重启后一段时间（中途对系统进行了太多操作，难以记录）后 Bug 继续出现，后来严重之时，重启也无法缓解；但是有时侯，该问题会消失几分钟；</li><li>系统偶尔会报错：提示出现内部错误：gkbd-keyboard-display:11:get_preferred_height_for_width() 与出现的 bug 也相关；</li><li>后来在网上搜索之后发现，这个 bug 有一定的触发条件，就是：在输入法偶尔可用的时候，使用中文输入，用数字键选择候选字词就会触发——于是在自己电脑上，趁输入法有一次偶尔可用的时候，试了一下果然如此；</li></ol><h4 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h4><ol><li>使用报错信息在百度和google镜像上搜索，有相关的英文网页，然而看不懂；</li><li>转换关键词搜索，在网上找到网页<a href="http://forum.ubuntu.org.cn/viewtopic.php?t=487280" target="_blank" rel="noopener">http://forum.ubuntu.org.cn/viewtopic.php?t=487280</a>，发现其问题描述和笔者遇到的问题如出一辙，按照其指示最终解决问题；</li></ol><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>将目录 <code>～/.cache/ibus/libpinyin</code> 删除后重启电脑，问题得到解决. </p>]]></content>
      
      
      <categories>
          
          <category> 系统维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 输入法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode Installation and Configuration</title>
      <link href="/posts/VSCode-Installation-and-Configuration.html"/>
      <url>/posts/VSCode-Installation-and-Configuration.html</url>
      
        <content type="html"><![CDATA[<p>Ubuntu 环境下安装配置 VSCode</p><a id="more"></a><p>为了在 Linux 环境下进行 C/C++ 程序的编写，笔者决定配置相关的程序开发环境，最终决定选用 VSCode + GCC 的搭配。</p><p>由于笔者水平极为有限，因此本文之只作为安装和配置过程中的记录，以供后续查看和捋清思路之用。</p><h4 id="1-安装必要的编译器套装"><a href="#1-安装必要的编译器套装" class="headerlink" title="1. 安装必要的编译器套装"></a>1. 安装必要的编译器套装</h4><p>​    据笔者所知（虽然不知道是什么时候听闻的）LInux 系统与 C/C++ 语言本身关系密切，且笔者某位朋友也曾提及过 Linux 环境下 C/C++ 环境的配置很顺畅，甚至于 GCC 本身是 Linux 某些发行版自带的。</p><p>​    但由于笔者在安装 Ubuntu 时选择了最小安装选项，所以一开始在 terminal 下输入 gcc 显示找不到命令，笔者推测此时系统并未安装 gcc 编译套装。</p><p>​    查找网络后，决定采用较为简单的方法：安装 build-essential 包，据说此包已包含许多 C/C++ 语言开发的必要编译包。</p><pre><code>sudo apt-get install build-essential</code></pre><pre><code> 安装完成后，多出了许多包，看起来很恐怖，也不知道具体是什么包，忽略之。</code></pre><p>​    <strong>值得注意的是</strong>：</p><p>​    在安装 build-essential 包的时候，提示将安装的包中并没有 glibc 这个包，而这个包据说是非常重要和基础的一个C 库，运行命令：</p><pre><code>dpkg -l</code></pre><p>不能看到 glibc 这个包的存在。但使用网上的查看 glibc 的方法是可以看到其版本的……</p><p>​    <strong>目前无法解决此疑问，也没有搞清诸如 libc，libc++，glibc 这些概念的关系</strong></p><h4 id="2-安装VSCode"><a href="#2-安装VSCode" class="headerlink" title="2. 安装VSCode"></a>2. 安装VSCode</h4><p>​    这一步骤非常简单，直接在 VSCode 的首页上下载 .deb 包安装即可。</p><h4 id="3-安装必要插件"><a href="#3-安装必要插件" class="headerlink" title="3. 安装必要插件"></a>3. 安装必要插件</h4><p>​    截至 2019.01.13，安装了四个插件：</p><ul><li>C/C++ </li><li>YAML 安装这个包是因为我的博客的许多配置文件据说是用 YAML 格式写的，与 C/C++ 本身好像没有什么关系</li><li>Chinese (SImplified) Language Pack 这个是简体中文语言包</li><li>Code Runner 这个包据说能提供一键运行的功能（我注意到 VSCode 没有传统的 IDE 中的 “构建“ 菜单）</li></ul><p>！！但目前配置应该还没有结束，因为许多网上的教程进行到这一步还没有结束。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction</title>
      <link href="/posts/Introduction.html"/>
      <url>/posts/Introduction.html</url>
      
        <content type="html"><![CDATA[<p>​    这是我的第一个博客。  </p><a id="more"></a><p>​    很久之前就有这个想法，搭建一个属于自己的博客，一个由自己创建、管理的地方，一个在虚拟世界里属于自己的窝。终于，在费尽九牛二虎之力后，这个博客终于搭建起来了，心里希望有的基础功能也添加得差不多了。可在真正在键盘上敲下第一行字的时候，突然发现好像什么东西都写不出来了，近一个多星期的功夫，完成了一件事，正要继续前行之时，却不知道自己是如何来到此处的，也不知道未来正要去往何方。</p><p>​    正是我现在的写照，迷迷糊糊，空空落落。</p><p>​    活在这个世界已经有一段时间了，脑子里记得的值得回味的事情不多，贫乏得好似那水沟里的一潭死水。所以，按说像我这种人，应该是不会想到去写博客的。</p><p>​    但它还是诞生了。</p><p>​    我猜想，也许是我自己心里某个声音在隐隐约约地提醒自己，你是个读过点书的人。嗯，好像是的，的确不止一次地幻想过自己在某个领域作出令人瞩目的成果，青史留名；又或者是，隐隐约约的某个声音希望自己在想说话的时候，这个博客的存在，能有个地方让我写下来。</p><p>​    人太需要被看见了。</p><p>​    虽然我知道，这辈子几乎不可能作出什么令人称道的成就了，也不能像以前那样，动不动就在朋友圈里大发感想。我还是决定，给自己搭一个小窝吧<br>​    ——哪怕这里写的一切内容可能只为自己而写，也只有自己会看；<br>​    ——但或许还会有一两个过客会经过，瞟上两眼<br>​    我对自己说。</p><p>​    我存在过的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/Hello-World.html"/>
      <url>/posts/Hello-World.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
