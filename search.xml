<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客测试</title>
      <link href="/posts/blog-tester.html"/>
      <url>/posts/blog-tester.html</url>
      
        <content type="html"><![CDATA[<p>此处用于测试自定义页面在远程的访问入口以及显示效果：<a href="../custom_page/MPE-test/MPE-test.html">超链接</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Configuration of my blog</title>
      <link href="/posts/Configuration-of-my-blog.html"/>
      <url>/posts/Configuration-of-my-blog.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇博文旨在记录笔者第二次搭建博客，更换主题的过程和配置；在这次折腾的过程中，笔者对于 hexo + github pages 的博客搭建原理有了更深的理解，因此本文一方面是对这些原理的阐述，另一方面也是记录下自己做过那些配置修改，以防日后遗忘。</p><h1 id="搭建原理"><a href="#搭建原理" class="headerlink" title="搭建原理"></a>搭建原理</h1><p>笔者对前端几乎一无所知，因此以下的内容有许多是笔者的推断</p><ol><li><p>github 与 github pages</p><p> github 会提供许多个 repos，这些 repos 本来是专门提供给用户进行代码或者其他文件的存放（当然还有在线协作、版本控制等非常强大的功能）</p><p> 而用户可以新建一个以 “[自己帐号名].github.io” 的 repos, 这个 repos 是每个 github 帐号唯一的。</p><p> 用户可以登陆 github，在其中设置启动 github pages 功能，并将其 “连接” 到上面所说的 repos；</p><p> github pages 有两个功能</p><ul><li><p>其内部已经配置好了 Jekyll，用户可以借助这个框架上传一些文件，后者将自动生成静态文件</p><p><strong>注：笔者的博客的搭建是在本地完成的，而且是借助 hexo 生成的，因此这个特性笔者其实用不到，不仅如此，貌似国内相当多的使用 github pages 搭建博客的 blogger 也是本地生成静态文件，从而也用不到这一特性</strong></p></li><li><p>将相关联的 repos 中的一系列静态文件渲染成页面，从而可以在网络上通过域名 “https://[自己帐号名].github.io” 来访问；</p><p>本博客的搭建用到了第二个功能，这是本博客可以在网络上正常访问的基础。</p></li></ul></li><li><p>Hexo 与 静态文件</p><p> 其实，Hexo 是一个静态网页生成器，它的作用就是将用户的写好的内容（比如最常见的 .md 文件）转换成静态的页面文件（如 html 等）；</p><p> 这样转换的意义在于，生成的静态网站的几乎一切格式、样式、装饰、插件都不需要用户去操心，因为这些东西都可以由 hexo 框架以及 hexo 主题去提供；</p><p> 通俗地讲就是，用户只负责写 .md 文件，这好比人的灵魂；但是 .md 文件中除了一般的文本之外包含许多富文本内容，需要一些程序读取、转换并正确地显示，而这些转换生成的文件相当于血肉，转换程序相当于营养物质；转换生成的内容引入了许多新的辅助信息，比如页面的样式应该是怎么样的，页面应该如何编排，这些信息好比骨架；最后，还有一些辅助的插件相当于装饰或者衣物；</p><p> 从头到尾，用户理论上需要关心的是两件事：</p><ul><li><p>.md 文件的编写；</p></li><li><p>hexo 以及其主题提供的（在生成静态页面过程中的）部分设置项</p><p>在做好这些工作之后，hexo 附带的 hexo-deployer-git 插件就可以把生成的静态文件（博客根目录下的 public 目录）推送到设定好的 github repo 上；</p><p>而我们预先设定好推送的目标 repo 正是 github 用户的个人 repo，那么整个工作流得以完整地串联起来，最终可以通过 github 的域名去访问。</p></li></ul></li></ol><h1 id="框架与主题选择"><a href="#框架与主题选择" class="headerlink" title="框架与主题选择"></a>框架与主题选择</h1><ol><li><p>本地静态页面生成框架：Hexo</p><p> 网址：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://hexo.io/</a></p><p> 选择理由：坦白地说，这个框架据说已经不是最好的静态页面生成框架了，比如它生成速度较慢，而且文档也写得非常简略，但是胜在配置较为简单，而功能却能大致满足需求；另外，这个框架在国内相对流行，因此找资料更加便捷；</p><p> 同时，笔者也不是太想继续折腾了，还是把有限的时间花在刀刃上吧，毕竟写博客只是一种情怀，又不能赚钱；</p></li><li><p>hexo 主题：hexo-theme-matery</p><p> github 项目地址：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a><br> 作者自己的博客：<a href="https://blinkfox.github.io/" target="_blank" rel="noopener">https://blinkfox.github.io/</a></p><p> 选择理由：</p><ul><li><p>好看</p></li><li><p>功能还算丰富，集成程度高</p></li><li><p>配置好像比 Next 主题稍微更加简单</p><p>缺点：</p></li><li><p>文档不是十分详细</p></li><li><p>用的人比较少（这是优点也是缺点），作者也不是十分活跃</p></li><li><p>美化程度较高，所以速度较慢</p></li></ul></li></ol><h1 id="笔者需要在博客中展示的内容"><a href="#笔者需要在博客中展示的内容" class="headerlink" title="笔者需要在博客中展示的内容"></a>笔者需要在博客中展示的内容</h1><p><strong>以下的需求是恒定的，不会因为所选框架或者主题的不同而发生改变。</strong></p><ol><li><p>markdown 原始特性：包括分级标题，强调，列表等</p><ul><li><p>重要级别：0</p></li><li><p>这是最最基础的特性，word 太恶心，原始的 LaTeX 又太过复杂，markdown 写起来是最舒服的；谢天谢地——大多数的 blogger 也是这样想的，所以几乎所有的博客框架都默认接受 .md 文件作为输入</p></li></ul></li><li><p>兼容 LaTeX 数学环境语法的 mathjax</p><ul><li><p>重要级别：0.5</p></li><li><p>笔者博客的主体部分要么是数学方面的内容，要么与数学或多或少相关联——所以如果全世界的博客都不支持数学公式，那笔者宁可不写博客</p></li></ul></li><li><p>图片</p><ul><li><p>重要级别：0.5</p></li><li><p>其重要级别如此高的原因是，学术或者技术性的文章（比如立体几何、图论等）有相当多的内容必须借助图片来表达，亦或者通过图片方可高效直观地表达</p></li><li><p>最好支持矢量图、动态图</p></li><li><p>图片的制作一般需要借助其他程序（Mathematica、LaTeX、Python、Geogebra 等）</p></li></ul></li><li><p>常用图形：graphviz, mermaid, flowchart, sequence-diagrams 等</p><ul><li><p>重要级别：1</p></li><li><p>这些图形特别适合用来表达抽象层面的概念、思路和逻辑，是理工科经常需要使用的有力工具</p></li><li><p>之所以重要性略低于上一项，是因为这些图形可以通过其他软件生成，再作为图片插入文档；只是这样做显得麻烦，而且资源多了之后，会有一种比较凌乱的感觉，因此最好还是以代码的形式直接在原文档中渲染；</p></li></ul></li><li><p>超链接</p><ul><li><p>重要级别：1.5</p></li><li><p>即使借助目录和分层，一篇文章的内容也是有上限的，因此我们需要借助超链接进行文章间的联系；</p></li><li><p>同时，由于笔者在本站中进行了某些自定义的配置（下面会提到），因此超链接的重要程度比原来更上一层</p></li></ul></li><li><p>代码块</p><ul><li><p>重要级别：2</p></li><li><p>理论上讲，如果不支持代码块的渲染，直接将代码以文本形式放到文档中也是可行的，只不过显示效果会非常糟糕；对于笔者这个（伪）计算机专业的人来说，还是很重要的；</p></li></ul></li><li><p>表格</p><ul><li><p>重要级别：2</p></li><li><p>与前者相似，不是没有它就不行，但是有了它会带来非常大的便利</p></li></ul></li><li><p>目录</p><ul><li><p>重要级别：2</p></li><li><p>对于长文章或者内容层次非常多的文章而言，极为有用</p></li></ul></li><li><p>锚点与页内跳转</p><ul><li><p>重要级别：2.5</p></li><li><p>大大增强读者的阅读体验</p></li></ul></li><li><p>脚注：</p><ul><li><p>重要级别：3</p></li><li><p>某些较为正式的文章会用到；</p></li></ul></li><li><p>扩展语法：任务列表, 上下标, 缩略, 高亮标记, CriticMarkup, Emoji</p><ul><li><p>重要级别：3.5</p></li><li><p>锦上添花的特性</p></li></ul></li></ol><h1 id="笔者理想中博客应具的特性"><a href="#笔者理想中博客应具的特性" class="headerlink" title="笔者理想中博客应具的特性"></a>笔者理想中博客应具的特性</h1><ol><li><p><a href="#笔者需要在博客中展示的内容">上一章节</a>中的特性完全可以正常在页面上展示或者被支持</p></li><li><p>博文应该可以进行多级分类，并且所有博文从上至下形成一个树状结构（类别之间不相交）</p></li><li><p>可以给博文定义标签，不同标签之间可以自由选择</p></li><li><p>有对整个博客站点的全貌进行展示的页面</p></li><li><p>博文展示逻辑（哪些放在最显眼的位置，哪些可以往后稍稍）可以灵活定义</p></li><li><p>可以在各个平台上（如PC、平板、移动端）访问，且显示效果不会有太大变化</p></li><li><p>（博文的）松散型与紧密型组织方式相结合</p></li><li><p>附加功能：</p><ul><li><p>站内搜索</p></li><li><p>评论系统</p></li><li><p>主题自定义美化</p></li><li><p>RSS</p></li><li><p>内部数据统计（文章数、字数、分类与标签）</p></li><li><p>外部数据统计（访客数、访问次数）</p></li><li><p>友链</p></li></ul></li></ol><h1 id="博客内容编排"><a href="#博客内容编排" class="headerlink" title="博客内容编排"></a>博客内容编排</h1><h2 id="自定义-html-页面"><a href="#自定义-html-页面" class="headerlink" title="自定义 html 页面"></a>自定义 html 页面</h2><p>所谓自定义页面，就是指笔者直接在本地生成无依赖的 html 文件（当然资源文件还是需要的，但是不需要 css 等文件），然后在这些 html 页面中记录真正的内容主体，并将这些页面文件以某种方式插入博客中；</p><p>这些页面完全是手动生成的，其背景、样式和博客的模板没有任何直接的关系，基本上就是类似于 word 或者 pdf 文件那样，文章内容被直接呈现在空白的页面上。</p><h3 id="为什么要自定义？直接用-Hexo-解析渲染-md-文件不好吗？"><a href="#为什么要自定义？直接用-Hexo-解析渲染-md-文件不好吗？" class="headerlink" title="为什么要自定义？直接用 Hexo 解析渲染 md 文件不好吗？"></a>为什么要自定义？直接用 Hexo 解析渲染 md 文件不好吗？</h3><ol><li><p>首先，博客撰写是在本地进行的，使用的 markdown 编辑器是 VS Code + Markdown Preview Enhanced。后者（下简称 MPE ）应该是已知的功能最强大的 markdown 编辑程序，<strong>它集成了种类丰富的前端插件，并支持<a href="#笔者需要在博客中展示的内容">笔者想要展示的所有内容</a></strong>，它是笔者写 markdown 的平台标准；</p></li><li><p>如果还是按照以前的方式，把 md 文件直接放在 hexo 博客目录中，那么 md 文件的解析和渲染就是由 hexo 框架内部的程序完成的，这样会带来几个问题：</p><ul><li><p>页面部分内容有可能没有办法被 hexo 支持，比如 Graphviz 图形，之前笔者就没有找到它的 hexo 插件；</p></li><li><p>有些内容可能没有办法被正确地转换显示，比如笔者之前第一次搭建博客的时候，某些插件的原因导致数学公式的解析出现了一些混乱，最终解析后页面中的部分内容不能转换成可以被 mathjax 正确渲染的形式——最终还是直接安装 pandoc 并使用其渲染才解决此问题；</p></li><li><p>即使可以正确转换显示，最终的效果也有可能和本地生成的效果不一样；</p></li><li><p>最后一点，如果要在 hexo 中支持各种富文本内容，需要安装配置许多插件，有些甚至需要在系统中安装依赖程序（pandoc），过于麻烦；</p></li></ul></li></ol><p>鉴于以上正反对比，笔者还是选择了本地直接生成 html 页面的方式，这样做的缺点在于，无论自己写博客还是读者看博客都稍显麻烦，但换来的好处是页面内容和展示效果能被严格掌控，组织方式也更为灵活。</p><h3 id="如何生成自定义的页面"><a href="#如何生成自定义的页面" class="headerlink" title="如何生成自定义的页面"></a>如何生成自定义的页面</h3><p>使用 VS Code 中 MPE 插件的 “导出 html” 功能，点击后即可直接在 md 文件相同目录下生成单独的一个 html 文件，这个 html 文件可以直接打开，显示效果与 MPE 预览效果几乎是一样的。</p><p>需要注意几点：</p><ul><li><p>html 文件默认需要和其引用的资源文件（txt, png, svg 等）放在一起——当然，在 md 源文件的选项中也可以设置将图片以 base64 编码<strong>嵌入</strong>到 html 中；</p></li><li><p>笔者自定义了 MPE 内部的 css 样式，这部分设置会写入 html 文件中，无需链接 css 也能生效；</p></li><li><p>导出时的选项是 html(cdn hosted)，这样才会促使浏览器在网上的 cdn 服务器中去寻找 mathjax、mermaid 等内容所依赖的 JS 库</p></li></ul><h3 id="如何嵌入到-hexo-生成的博客主体"><a href="#如何嵌入到-hexo-生成的博客主体" class="headerlink" title="如何嵌入到 hexo 生成的博客主体"></a>如何嵌入到 hexo 生成的博客主体</h3><p>Hexo 生成的静态文件位于本地博客根目录下的 public 文件夹；不难发现，md 文件其实就是被渲染成了 html 文件，而且这些文件在浏览器上的访问链接和其目录组织是<strong>一一对应</strong>的</p><p>我们假设 github 的用户名为 Tony, repo 的名字为 Tony.github.io；</p><ul><li><p><a href="https://Tony.github.io" target="_blank" rel="noopener">https://Tony.github.io</a> 显示的页面就是 repo 根目录 <code>/</code> 下的 index.html</p></li><li><p><a href="https://Tony.github.io/documentary1/" target="_blank" rel="noopener">https://Tony.github.io/documentary1/</a> 显示的页面就是 repo 目录 <code>/documentary/</code> 下的 index.html</p></li></ul><p>于是，我们只须将页面文件（连带必须的文件）上传至 对应 repo 的目录下，就可以直接通过 url 来访问了。</p><p>还有一个关键的问题，如何不被 Hexo 处理而直接上传至 github？<br>注意到在博客配置文件 <code>_config.yml</code> 中有一项为</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Directory</span><span class="token punctuation">...</span><span class="token punctuation">...</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> </code></pre><p>这个选项正是用以标记不需要经过渲染而直接上传到 github repo 的目录和文件的。换句话说，Hexo 原生支持 “不经渲染直接上传” 这一特性（感谢作者）。</p><p>我们把这一项作如下设置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> custom_page/**</code></pre><p>注意这一项默认将 <code>/sourse</code> 视作根目录，因此上一项实际指向的对象就是：目录 <code>/source/custom_page/</code> 以及其所有的子目录和文件。</p><h2 id="将部分博文汇集成册"><a href="#将部分博文汇集成册" class="headerlink" title="将部分博文汇集成册"></a>将部分博文汇集成册</h2><p>在 <a href="#笔者理想中博客应具的特性">笔者理想的博客特性</a>中，笔者提到过最好可以自己决定博文的组织形式偏松散还是偏紧密。</p><p>因此，在前面所述生成插入自定义界面的基础上，笔者想到可以将这些博文汇集成 “册”：</p><ul><li><p>生成普通的博文</p></li><li><p>在该博文中添加多个指向自定义页面的链接</p></li></ul><p>这样，多个逻辑上紧密关联的自定义 html 页面就汇集在了一起——以一种朴素的方式。</p><p>这种组织方式特别适合用于某门课程或者某个学科的笔记、习题集，以及单词本、摘抄积累等内容。</p><h1 id="博客具体配置"><a href="#博客具体配置" class="headerlink" title="博客具体配置"></a>博客具体配置</h1><p>本节记录在此次搭建博客过程中，各项配置的具体内容</p><h2 id="Hexo-框架配置"><a href="#Hexo-框架配置" class="headerlink" title="Hexo 框架配置"></a>Hexo 框架配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="站点基本信息配置"><a href="#站点基本信息配置" class="headerlink" title="站点基本信息配置"></a>站点基本信息配置</h4><p>位置：<code>/_config.yml</code></p><p>相关项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Googolplex<span class="token punctuation">-</span>C<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 10^googol<span class="token key atrule">description</span><span class="token punctuation">:</span> 没什么好看的，关了吧<span class="token key atrule">keywords</span><span class="token punctuation">:</span> Maths<span class="token punctuation">,</span>Computer<span class="token punctuation">-</span>Science<span class="token punctuation">,</span>Technology <span class="token key atrule">author</span><span class="token punctuation">:</span> Googolplex<span class="token punctuation">-</span>C<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CNtimezone<span class="token punctuation">:</span></code></pre><h4 id="post（博文）链接优化与目录组织"><a href="#post（博文）链接优化与目录组织" class="headerlink" title="post（博文）链接优化与目录组织"></a>post（博文）链接优化与目录组织</h4><h5 id="普通-posts-目录组织设置"><a href="#普通-posts-目录组织设置" class="headerlink" title="普通 posts 目录组织设置"></a>普通 posts 目录组织设置</h5><p>位置：<code>/_config.yml</code></p><p>配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//googolplex<span class="token punctuation">-</span>c.github.io/<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span class="token comment" spellcheck="true"># permalink: :year/:month/:day/:title/</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>url.htmlpermalink_defaults<span class="token punctuation">:</span></code></pre><p>这几项设置的是站点链接结构。以下是笔者自己的理解：</p><ol><li><p><code>url</code> 一项设置站点的根 url，</p></li><li><p><code>root</code> 一项设置 repo 中的站点的根目录，它与前一项是对应的，访问这个 url 就对应打开根目录下的 index.html 文件的操作；</p></li><li><p><code>permalink</code> 一项非常有用，它的默认值是 “:year/:month/:day/:title/”，也即是说，如果有一篇博文，其 front-matter的 <code>date</code> 和 <code>title</code> 两项的值分别是：<code>2018 01 02 00:00:00</code> 和 <code>Hi Iron Man</code>，那么这篇博文就会以如下方式生成：</p><p> <code>/2018/01/01/Hi Iron Man/index.html</code></p><p> 进而对应的 url 为 <a href="https://Tony.github.io/2018/01/01/Hi-Iron-Man/index.html" target="_blank" rel="noopener">https://Tony.github.io/2018/01/01/Hi-Iron-Man/index.html</a></p></li></ol><p>把 <code>permalink</code> 一项设为 <code>posts/url.html</code> 的效果是：</p><ul><li>每一篇博文不再单独地存储在各自单独的目录中，命令也不再是 index.html，而是从 md 文件 front-matter 中提取 url 作为文件名；</li></ul><p>这样设置基于几个考虑：</p><ol><li>posts 生成的静态页面的目录组织形式与本地目录 <code>/source</code> 中保持一致，这样在 markdown 正文中通过相对路径进行<strong>页面间链接</strong>时，无论是本地还是远程都可以正确地链接，无需再修改</li><li><code>permalink</code> 一项可以使用 posts 中的一切 front-matter，因此 <code>:url</code> 一项是笔者自定义的，<strong>使用的时候 <em>规定</em> 必须使用英文手动填写</strong>；之所以不使用 <code>:title</code>，是因为有些时候标题难免使用中文，而中文生成的链接会导致很多问题，也不利于 SEO。</li><li>注意这个 posts 文件夹名称和本地的文件夹名称是不一样的，前者开头没有下划线，因为下划线开头的目录推送到远程会被 github pages 忽略！！</li></ol><h5 id="自定义页面目录设置"><a href="#自定义页面目录设置" class="headerlink" title="自定义页面目录设置"></a>自定义页面目录设置</h5><p>自定义页面（连同资源文件）在本地的存放位置是：<code>/source/custom_page/[页面名]/</code>；</p><p>同时在博客配置文件中设置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Directory</span><span class="token punctuation">...</span><span class="token punctuation">...</span><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> custom_page/**</code></pre><h5 id="目标效果"><a href="#目标效果" class="headerlink" title="目标效果"></a>目标效果</h5><p>推送到远程的静态文件——无论是由 Hexo 生成的还是自定义生成的——他们的目录组织和本地保持一致；</p><p>本地的情形：</p><ul><li><p>/</p><ul><li><p>（其它目录）</p></li><li><p>custom_page</p><ul><li><p>test1</p><ul><li><p>test1.html</p></li><li><p>pic.png</p></li></ul></li></ul></li><li><p>_posts</p><ul><li><p>test2.md</p></li><li><p>test2  (as an asset folder)</p></li></ul></li></ul></li></ul><p>github repo 上的组织：</p><ul><li><p>/</p><ul><li><p>（其它目录）</p></li><li><p>custom_page</p><ul><li><p>test1</p><ul><li><p>test1.html</p></li><li><p>pic.png</p></li></ul></li></ul></li><li><p>posts</p><ul><li><p>test2.html</p></li><li><p>test2  (as an asset folder, existing only if not empty)</p></li></ul></li></ul></li></ul><p>在此前提下，自定义页面和 Hexo 生成页之间的相互引用就可以通过相对路径形式的超链接 <code>[title](link)</code> 来实现啦。</p><p>这里的设置对于前面的 <a href="#将部分博文汇集成册">博文汇成册</a> 的目标而言相当关键，同时也是笔者重新编排博客内容和目录组织这个大目标中的重要一环。</p><h4 id="写作配置"><a href="#写作配置" class="headerlink" title="写作配置"></a>写作配置</h4><pre class=" language-yml"><code class="language-yml"># Writingnew_post_name: :year-:month-:day-:title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight:  enable: false  line_number: true  auto_detect: false  tab_replace:</code></pre><p>笔者在此处更改了几项：</p><ol><li><code>new_post_name</code> 这一项定义的是新建 posts 的时候，md 文件的命名模板，注意此处以半角冒号 : 开头的 <code>:XXX</code> 是 front-matter 中的参数；其中 <code>:title</code> 这一项就是 <code>hexo new &lt;title&gt;</code> 中的 <code>&lt;title&gt;</code> 部分，笔者此处的设置的目的是<strong>自动在文件名前面加上日期</strong>（因为前面已经说明了所有的博文位于同一目录，因此以日期编排会更加有序），当然，在 front-matter 中 <code>title</code> 一项不会包含日期；</li><li><code>post_asset_folder: true</code> 一项设为 <code>true</code>，这样每生成一个 post，都会新建一个与其 <strong>文件名</strong> 相同的文件夹，用以存储资源文件。</li><li><code>external_link</code> 一项设为 <code>true</code></li><li><code>highlight</code> 一项设为 <code>false</code>，自带的代码高亮真的是太丑了！！</li></ol><h4 id="启用哪个主题"><a href="#启用哪个主题" class="headerlink" title="启用哪个主题"></a>启用哪个主题</h4><pre class=" language-yml"><code class="language-yml"># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-matery</code></pre><p>本设置项决定启用本地 <code>/theme/</code> 下的哪个主题</p><h4 id="远程部署设置"><a href="#远程部署设置" class="headerlink" title="远程部署设置"></a>远程部署设置</h4><pre class=" language-yml"><code class="language-yml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:Googolplex-C/Googolplex-C.github.io.git  branch: master</code></pre><p>这里用于设置部署方式，远程库的链接，以及远程库的部署分支上。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><h4 id="安装-hexo-generator-search，用以支持站内搜索"><a href="#安装-hexo-generator-search，用以支持站内搜索" class="headerlink" title="安装 hexo-generator-search，用以支持站内搜索"></a>安装 hexo-generator-search，用以支持站内搜索</h4><p>在博客的根目录下，输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>博客根目录下的 _config.yml 文件中，新增以下的配置项</p><pre class=" language-yml"><code class="language-yml">search:  path: search.xml  field: post</code></pre><h4 id="安装-hexo-wordcount，用以统计（每一篇）文章字数"><a href="#安装-hexo-wordcount，用以统计（每一篇）文章字数" class="headerlink" title="安装 hexo-wordcount，用以统计（每一篇）文章字数"></a>安装 hexo-wordcount，用以统计（每一篇）文章字数</h4><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在<strong>主题目录</strong>下的 _config.yml 文件中，激活以下配置项即可：</p><pre class=" language-yml"><code class="language-yml">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h4 id="安装-hexo-generator-feed，添加-RSS-支持"><a href="#安装-hexo-generator-feed，添加-RSS-支持" class="headerlink" title="安装 hexo-generator-feed，添加 RSS 支持"></a>安装 hexo-generator-feed，添加 RSS 支持</h4><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class=" language-yml"><code class="language-yml">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><h4 id="安装-hexo-prism-plugin-插件"><a href="#安装-hexo-prism-plugin-插件" class="headerlink" title="安装  hexo-prism-plugin 插件"></a>安装  hexo-prism-plugin 插件</h4><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><h2 id="新主题有哪些（内置）新特性"><a href="#新主题有哪些（内置）新特性" class="headerlink" title="新主题有哪些（内置）新特性"></a>新主题有哪些（内置）新特性</h2><ul><li><strong>Banner 封面轮播文章（好）</strong></li><li>“我的梦想” 展示板（鸡肋）</li><li>首页的音乐播放器和视频播放器配置（用不到）</li><li><strong>显示推荐文章名称和按钮配置（即首页有一块版面用于显示 “推荐文章”，由 md 文件 front-matter 中的 <code>top</code> 一项控制）</strong></li><li><strong>个人信息（也就是 about 页面）</strong></li><li><strong>文章打赏信息（好东西）</strong></li><li><strong>复制文章内容时追加版权信息（好东西）</strong></li><li>MathJax（Hexo 自身的解析有问题，所以支持 mathjax 也没有什么用，而且有公式的内容笔者都会放到自定义页面中去）</li><li><strong>文章字数统计、阅读时长（好东西，需要安装插件）</strong></li><li>点击页面的’爱心’效果（花里胡哨）</li><li>我的项目（有点用）</li><li>我的技能（装逼用）</li><li>我的相册（好像没什么用）</li><li><strong>Gitalk、Gitment、Valine 和 disqus 评论配置（好，非常好）</strong></li><li><strong>不蒜子统计和谷歌分析（Google Analytics）（好，非常好）</strong></li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图（增加一些美观程度）</li></ul><h2 id="hexo-theme-matery-配置"><a href="#hexo-theme-matery-配置" class="headerlink" title="hexo-theme-matery 配置"></a>hexo-theme-matery 配置</h2><h3 id="新建导航页面"><a href="#新建导航页面" class="headerlink" title="新建导航页面"></a>新建导航页面</h3><h4 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h4><p>categories 页是用来展示所有分类的页面，命令如下：</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/categories/index.md，至少需要以下内容：</p><pre class=" language-yml"><code class="language-yml">title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"</code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><p>tags 页是用来展示所有标签的页面，命令如下：</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容：</p><pre class=" language-yml"><code class="language-yml">title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"</code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><p>about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about/index.md 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/about/index.md，至少需要以下内容：</p><pre class=" language-yml"><code class="language-yml">title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"</code></pre><h4 id="新建友情连接-friends-页（可选，但笔者还是做了）"><a href="#新建友情连接-friends-页（可选，但笔者还是做了）" class="headerlink" title="新建友情连接 friends 页（可选，但笔者还是做了）"></a>新建友情连接 friends 页（可选，但笔者还是做了）</h4><p>friends 页是用来展示友情连接信息的页面，如果在你的博客 source 目录下还没有 friends/index.md 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yml"><code class="language-yml">title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"</code></pre><p>同时，在博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>以上只作举例，因为这些其实都是主题作者的 “朋友们”，和笔者无关。</p><h3 id="内置特性开启与主题美化"><a href="#内置特性开启与主题美化" class="headerlink" title="内置特性开启与主题美化"></a>内置特性开启与主题美化</h3><h4 id="开启主题的代码高亮功能"><a href="#开启主题的代码高亮功能" class="headerlink" title="开启主题的代码高亮功能"></a>开启主题的代码高亮功能</h4><p>修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 prism 插件相关的配置，主要配置如下：</p><pre class=" language-yml"><code class="language-yml">highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h4 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h4><p>修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><p>笔者将其改成如下的内容：</p><pre class=" language-text"><code class="language-text"><footer class="page-footer bg-color">    <div class="container row center-align">        <div class="col s12 m8 l8 copy-right">            本站由&copy;<a href="https://googolplex-c.github.io/" target="_blank">Googolplex-C</a>基于            <a href="https://hexo.io/" target="_blank">Hexo</a> 的            <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank">hexo-theme-matery</a>主题搭建.            <% if (theme.wordCount.enable && theme.wordCount.totalCount) { %>                &nbsp;<i class="fa fa-area-chart"></i>&nbsp;站点总字数:&nbsp;                <span class="white-color"><%= totalcount(site) %></span>            <% } %>            <% let socialClass = '' %>            <% if (theme.busuanziStatistics && theme.busuanziStatistics.enable) { %>                <% socialClass = 'social-statis' %><br>                <% if (theme.busuanziStatistics && theme.busuanziStatistics.totalTraffic) { %>                <span id="busuanzi_container_site_pv">                    <i class="fa fa-heart-o"></i>                    本站总访问量 <span id="busuanzi_value_site_pv" class="white-color"></span>                </span>                <% } %>                <% if (theme.busuanziStatistics && theme.busuanziStatistics.totalNumberOfvisitors) { %>                <span id="busuanzi_container_site_uv">                    <i class="fa fa-users"></i>                    次,&nbsp;访客数 <span id="busuanzi_value_site_uv" class="white-color"></span> 人.                </span>                <% } %>            <% } %>        </div>        <div class="col s12 m4 l4 social-link <%- socialClass %>"><%- partial('_partial/social-link') %></div>    </div></footer><div class="progress-bar"></div></code></pre><h4 id="修改首页的社交链接"><a href="#修改首页的社交链接" class="headerlink" title="修改首页的社交链接"></a>修改首页的社交链接</h4><p>在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱的配置。我们可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改需要的社交链接地址</p><p>笔者删除了许多链接，只保留了一部分：</p><pre class=" language-text"><code class="language-text"><% if (theme.socialLink.github) { %>    <a href="https://googolplex-c.github.io/" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50">        <i class="fa fa-github"></i>    </a><% } %><% if (config.feed && config.feed.path == 'atom.xml') { %>    <a href="<%- url_for('/atom.xml') %>" class="tooltipped" target="_blank" data-tooltip="RSS 订阅" data-position="top" data-delay="50">        <i class="fa fa-rss"></i>    </a><% } %></code></pre><h4 id="修改打赏的二位码"><a href="#修改打赏的二位码" class="headerlink" title="修改打赏的二位码"></a>修改打赏的二位码</h4><p>在主题文件的 <code>theme/hexo-theme-matery/source/medias/reward</code> 文件中替换即可。</p><h4 id="修改-Favicon、Logo-和-Avatar"><a href="#修改-Favicon、Logo-和-Avatar" class="headerlink" title="修改 Favicon、Logo 和 Avatar"></a>修改 Favicon、Logo 和 Avatar</h4><p>在主题文件的 <code>theme/hexo-theme-matery/source/</code> 以及 <code>theme/hexo-theme-matery/source/medias</code> 目录中替换相应文件即可。</p><h4 id="修改主题颜色（准确而言，应该是页首和页脚的颜色，banner-图的颜色是自己变化的）"><a href="#修改主题颜色（准确而言，应该是页首和页脚的颜色，banner-图的颜色是自己变化的）" class="headerlink" title="修改主题颜色（准确而言，应该是页首和页脚的颜色，banner 图的颜色是自己变化的）"></a>修改主题颜色（准确而言，应该是页首和页脚的颜色，banner 图的颜色是自己变化的）</h4><p>修改主题颜色</p><p>在主题文件的 <code>/theme/hexo-theme-matery/source/css/matery.css</code> 文件中，搜索 .bg-color 来修改背景颜色：</p><p>以下是笔者的个人喜好（灰色配彩色）：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#616161</span> <span class="token number">0%</span>, <span class="token hexcode">#BDBDBD</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="“我的梦想”-dashboard"><a href="#“我的梦想”-dashboard" class="headerlink" title="“我的梦想” dashboard"></a>“我的梦想” dashboard</h4><p>笔者直接禁用了它，无聊，还梦想呢，咋不上天……</p><pre class=" language-yml"><code class="language-yml">dream:  enable: false</code></pre><h3 id="其他功能的开启和设置（推荐文章、不蒜子统计等）"><a href="#其他功能的开启和设置（推荐文章、不蒜子统计等）" class="headerlink" title="其他功能的开启和设置（推荐文章、不蒜子统计等）"></a>其他功能的开启和设置（推荐文章、不蒜子统计等）</h3><pre class=" language-yml"><code class="language-yml"># Whether to display the musics.# 是否在首页显示音乐.music:  enable: false  showTitle: true  title: 听听音乐  fixed: false # 开启吸底模式  autoplay: false # 是否自动播放  theme: '#42b983'  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: #列表最大高度# Whether to display the videos.# 是否在首页显示视频.video:  enable: false  showTitle: true  title: 精彩视频  url: # 必填  pic:  thumbnails:  height: # 如：400  autoplay: false # 是否自动播放  theme: '#42b983'  loop: false # 是否循环播放  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7# Whether to display the title of the recommended posts# 是否显示推荐文章的标题recommend:  showTitle: true# Configure website favicon and LOGO# 配置网站favicon和网站LOGOfavicon: /favicon.pnglogo: /medias/logo.png# The configuration of the second button in the home banner,# including the display name of the button, the font awesome icon, and the hyperlink to the button.# 首页 banner 中的第二个按钮的配置，包括按钮的显示名称、font awesome图标和按钮的超链接.indexbtn:  enable: true  name: Github  icon: fa-github-alt  url: https://github.com/Googolplex-C/# The configurations of the second line of home banner# icon/button will not show up if you leave the corresponding socialLink empty# 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  qq: 123123123  github:  email: xxx@xx.xx# Whether to activate the Post TOC, and Configure which title types are supported by TOC support.# You can add `toc: false` to the Front-matter of a post to turn off the TOC.# 是否激活文章 TOC 功能，并配置TOC支持选中哪些标题类型，这是全局配置。# 可以在某篇文章的 Front-matter 中再加上`toc: false`，使该篇文章关闭TOC目录功能toc:  enable: true  heading: h2, h3, h4  showToggleBtn: true # 是否显示切换TOC目录展开收缩的按钮# Whether the code is broken.# 代码是否折行code:  break: true# 是否激活文章末尾的打赏功能，默认激活（你替换为的你自己的微信、支付宝二维码图片、或者使用网络图片也可以）.reward:  enable: true  title: 你的赏识是我前进的动力  wechat: /medias/reward/wechat.png  alipay: /medias/reward/alipay.jpg# Whether to activate the copyright information of the blog and author when copying the post content.# minCharNumber: Approve copyright information by copying at least how many characters.# 是否激活复制文章时追加博客和作者的版权信息.copyright:  enable: false  minCharNumber: 50 # 至少复制多少个字符就追加版权信息.  description: 本文章著作权归作者所有，任何形式的转载都请注明出处。# Whether to activate the mathjax, this is a global configuration, but the post still does not open the mathjax rendering.# Considering that the mathjax loading is time consuming,# you also need to add `mathjax: true` to the Front-matter of the post that needs to be rendered.# 是否激活mathjax数学公式，这是全局配置，但文章仍然不会都开启mathjax渲染，# 考虑到mathjax加载比较耗时，你还需要在需要渲染的文章的Front-matter中再加上`mathjax: true`才行.mathjax:  enable: false  cdn: https://cdn.bootcss.com/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML# Post word count, reading duration, site total word count.# Before you activate, please confirm that you have installed the hexo-wordcount plugin,# install the plugin command: `npm i --save hexo-wordcount`.# 文章字数统计、阅读时长、总字数统计# 激活前请确认你已经安装了 hexo-wordcount 插件，安装命令: `npm i --save hexo-wordcount`wordCount:  enable: true  postWordCount: true  min2read: true  totalCount: true# Whether to activate the 'love' effect of clicking on the page.# 是否激活点击页面的'爱心'效果，默认激活.clicklove:  enable: false# profile in about page, including avatars, career, and personal introductions.# 在”关于”页面中配置个人信息，包括头像、职业和个人介绍.profile:  avatar: /medias/avatar.gif  career: A learner  introduction: I am.# config my projects informations in about page.# If you don't want to display this `My Projects` content, you can deactivate or delete this configuration.# 在“关于”页面配置"我的项目"信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除.myProjects:  enable: true  data:    hexo-theme-matery:      icon: fa-meetup      iconBackground: 'linear-gradient(to bottom right, #66BB6A 0%, #81C784 100%)'      url: http://github.com/blinkfox/hexo-theme-matery      desc: This is a Hexo blog theme with 'Material Design' and responsive design.    zealt:        icon: fa-database        iconBackground: 'linear-gradient(to bottom right, #F06292 0%, #EF5350 100%)'        url: https://github.com/blinkfox/zealot        desc: 一个轻量级的SQL和参数动态生成工具库    typora-vue-theme:        icon: fa-file-text-o        iconBackground: 'linear-gradient(to bottom right, #29B6F6 0%, #1E88E5 100%)'        url: https://github.com/blinkfox/typora-vue-theme        desc: This is a typora theme inspired by Vue document style.# config my skills informations in about page.# If you don't want to display this `My Skills` content, you can deactivate or delete this configuration.# 在“关于”页面配置"我的技能"信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除.mySkills:  enable: true  data:    Java:      background: 'linear-gradient(to right, #FF0066 0%, #FF00CC 100%)'      percent: 85%    JavaScript:      background: 'linear-gradient(to right, #9900FF 0%, #CC66FF 100%)'      percent: 80%    HTML5:      background: 'linear-gradient(to right, #2196F3 0%, #42A5F5 100%)'      percent: 80%    CSS:      background: 'linear-gradient(to right, #00BCD4 0%, #80DEEA 100%)'      percent: 70%    SQL:      background: 'linear-gradient(to right, #4CAF50 0%, #81C784 100%)'      percent: 90%    程序设计:      background: 'linear-gradient(to right, #FFEB3B 0%, #FFF176 100%)'      percent: 75%# config gallery of my photos in about page.# If you don't want to display this `Gallery` content, you can deactivate or delete this configuration.# 在“关于”页面配置"我的相册"图片，如果你不需要这些信息则可以将其设置为不激活或者将其删除.myGallery:  enable: false  data:    - /medias/featureimages/0.jpg    - /medias/featureimages/1.jpg    - /medias/featureimages/2.jpg# Whether to display post-calender in the `archive` page# 设置在归档页面中是否显示'文章日历'控件postCalendar: true# the Gitalk config，default disabled# Gitalk 评论模块的配置，默认为不激活gitalk:  enable: false  owner:  repo:  oauth:    clientId:    clientSecret:  admin:# the Gitment config，default disabled# Gitment 评论模块的配置，默认为不激活gitment:  enable: false  owner:  repo:  oauth:    clientId:    clientSecret:# disqus config, default disabled# Disqus评论模块的配置，默认为不激活disqus:  enable: false  shortname:# Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: false  uid:# The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: false  appId:  appKey:  notify: false  verify: false  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'just go go' # Comment Box placeholder# Whether to display fork me on github icon and link, default true, You can change it to your repo address# 配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址.githubLink:  enable: true  url: https://github.com/Googolplex-C/  title: Fork Me# The password verification feature of read post. To use this feature,# activate the configuration item and write the 'password' key and Cipher in the post's Front-matter.# Note: In order to ensure that the original password will not be leaked to the web page,# the password of the article must be encrypted by 'SHA256' so that it will not be cracked.# 阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的Front-matter中写上'password'的键和加密后的密文即可.# 请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过'SHA256'加密的，这样就不会被破解.verifyPassword:  enable: false  promptMessage: 请输入访问本文章的密码  errorMessage: 密码错误，将返回主页！# busuanzi(http://busuanzi.ibruce.info/) website statistics# 不蒜子(http://busuanzi.ibruce.info/) 网站统计busuanziStatistics:  enable: true  totalTraffic: true # 总访问量  totalNumberOfvisitors: true # 总人次# Add google analytics configuration# 添加 Google Analytics 配置googleAnalytics:  enable: false  id:# The used front-end library can be replaced with the corresponding CDN address as needed,# If the specific version is not specified below, you can use the latest version.# 使用到的前端库，可按需替换成对应的CDN地址，如果下面未指定具体的版本号，使用最新的版本即可.libs:  css:    fontAwesome: /libs/awesome/css/font-awesome.min.css # V4.7.0    materialize: /libs/materialize/materialize.min.css # 1.0.0    aos: /libs/aos/aos.css    animate: /libs/animate/animate.min.css # V3.5.1    lightgallery: /libs/lightGallery/css/lightgallery.min.css # V1.6.11    aplayer: /libs/aplayer/APlayer.min.css    dplayer: /libs/dplayer/DPlayer.min.css    gitalk: /libs/gitalk/gitalk.css    jqcloud: /libs/jqcloud/jqcloud.css    tocbot: /libs/tocbot/tocbot.css  js:    jquery: /libs/jquery/jquery-2.2.0.min.js    materialize: /libs/materialize/materialize.min.js # 1.0.0    masonry: /libs/masonry/masonry.pkgd.min.js # v4.0.0    aos: /libs/aos/aos.js    scrollProgress: /libs/scrollprogress/scrollProgress.min.js    lightgallery: /libs/lightGallery/js/lightgallery-all.min.js # V1.6.11    clicklove: /libs/others/clicklove.js    busuanzi: /libs/others/busuanzi.pure.mini.js    aplayer: /libs/aplayer/APlayer.min.js    dplayer: /libs/dplayer/DPlayer.min.js    crypto: /libs/cryptojs/crypto-js.min.js    echarts: /libs/echarts/echarts.min.js    gitalk: /libs/gitalk/gitalk.min.js    jqcloud: /libs/jqcloud/jqcloud-1.0.4.min.js    tocbot: /libs/tocbot/tocbot.min.js# The post featured images that needs to be displayed when there is no image.# 无文章特色图片时需要显示的文章特色图片.featureImages: - /medias/featureimages/0.jpg- /medias/featureimages/1.jpg- /medias/featureimages/2.jpg- /medias/featureimages/3.jpg- /medias/featureimages/4.jpg- /medias/featureimages/5.jpg- /medias/featureimages/6.jpg- /medias/featureimages/7.jpg- /medias/featureimages/8.jpg- /medias/featureimages/9.jpg- /medias/featureimages/10.jpg- /medias/featureimages/11.jpg- /medias/featureimages/12.jpg- /medias/featureimages/13.jpg- /medias/featureimages/14.jpg- /medias/featureimages/15.jpg- /medias/featureimages/16.jpg- /medias/featureimages/17.jpg- /medias/featureimages/18.jpg- /medias/featureimages/19.jpg- /medias/featureimages/20.jpg- /medias/featureimages/21.jpg- /medias/featureimages/22.jpg- /medias/featureimages/23.jpg  # default configs that the default policy for every articles/posts  # default 配置文章的默认转载规则  # you can define reprint policy for a single article in the front-matter of the specific md file using this key: reprintPolicy  # 您可以使用在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则  # 可用的转载规则有（available reprint policies are）：  # 这些转载规则的意义请参考(you can refer to this link FMI)：https://creativecommons.org/choose/?lang=zh  # cc_by（知识共享署名 4.0 国际许可协议 Creative Commons Attribution-NoDerivatives 4.0 International License）  # cc_by_nd（知识共享署名-禁止演绎 4.0 国际许可协议 Creative Commons Attribution-NoDerivatives 4.0 International License）  # cc_by_sa（知识共享署名-相同方式共享 4.0 国际许可协议 Creative Commons Attribution-ShareAlike 4.0 International License）  # cc_by_nc（知识共享署名-非商业性使用 4.0 国际许可协议 Creative Commons Attribution-NoDerivatives 4.0 International License）  # cc_by_nc_nd（知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议 Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License）  # cc_by_nc_sa（知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License）  # cc0（CC0 1.0 通用 (CC0 1.0) 公共领域贡献 CC0 1.0 Universal (CC0 1.0) Public Domain Dedication） https://creativecommons.org/publicdomain/zero/1.0/deed.zh  # noreprint（不允许转载 not allowed to reprint）  # pay（付费转载 pay for reprinting）reprint:  enable: true # whether enable reprint section 是否启用“转载规则限定模块”  default: noreprint</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Introduction</title>
      <link href="/posts/Introduction.html"/>
      <url>/posts/Introduction.html</url>
      
        <content type="html"><![CDATA[<p>​    这是我的第一个博客。  </p><a id="more"></a><p>​    很久之前就有这个想法，搭建一个属于自己的博客，一个由自己创建、管理的地方，一个在虚拟世界里属于自己的窝。终于，在费尽九牛二虎之力后，这个博客终于搭建起来了，心里希望有的基础功能也添加得差不多了。可在真正在键盘上敲下第一行字的时候，突然发现好像什么东西都写不出来了，近一个多星期的功夫，完成了一件事，正要继续前行之时，却不知道自己是如何来到此处的，也不知道未来正要去往何方。</p><p>​    正是我现在的写照，迷迷糊糊，空空落落。</p><p>​    活在这个世界已经有一段时间了，脑子里记得的值得回味的事情不多，贫乏得好似那水沟里的一潭死水。所以，按说像我这种人，应该是不会想到去写博客的。</p><p>​    但它还是诞生了。</p><p>​    我猜想，也许是我自己心里某个声音在隐隐约约地提醒自己，你是个读过点书的人。嗯，好像是的，的确不止一次地幻想过自己在某个领域作出令人瞩目的成果，青史留名；又或者是，隐隐约约的某个声音希望自己在想说话的时候，这个博客的存在，能有个地方让我写下来。</p><p>​    人太需要被看见了。</p><p>​    虽然我知道，这辈子几乎不可能作出什么令人称道的成就了，也不能像以前那样，动不动就在朋友圈里大发感想。我还是决定，给自己搭一个小窝吧<br>​    ——哪怕这里写的一切内容可能只为自己而写，也只有自己会看；<br>​    ——但或许还会有一两个过客会经过，瞟上两眼<br>​    我对自己说。</p><p>​    我存在过的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/Hello-World.html"/>
      <url>/posts/Hello-World.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
